-- MySQL dump 10.13  Distrib 5.5.47, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: rires
-- ------------------------------------------------------
-- Server version	5.5.47-0ubuntu0.14.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Current Database: `rires`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `rires` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `rires`;

--
-- Table structure for table `evaluation`
--

DROP TABLE IF EXISTS `evaluation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `evaluation` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `mid` bigint(20) NOT NULL COMMENT 'model id',
  `query_tag` bigint(20) NOT NULL COMMENT 'query set id, e.g. TREC1 or WT2G',
  `submitted_dt` datetime NOT NULL,
  `evaluated_dt` datetime NOT NULL,
  `evaluate_status` smallint(6) NOT NULL DEFAULT '-1',
  `evaluate_msg` mediumtext NOT NULL,
  `performances` mediumtext NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=88 DEFAULT CHARSET=utf8 COMMENT='stores the evaluation information. Basically which model against which query.';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `evaluation`
--

LOCK TABLES `evaluation` WRITE;
/*!40000 ALTER TABLE `evaluation` DISABLE KEYS */;
INSERT INTO `evaluation` VALUES (1,3,1,'2016-04-18 15:34:01','2016-04-19 14:24:21',0,'','{\n  \"P_10\": 0.114, \n  \"P_100\": 0.0668, \n  \"P_1000\": 0.0234, \n  \"P_15\": 0.1053, \n  \"P_20\": 0.108, \n  \"P_200\": 0.0525, \n  \"P_30\": 0.098, \n  \"P_5\": 0.1, \n  \"P_500\": 0.035, \n  \"Rprec\": 0.0902, \n  \"bpref\": 0.1026, \n  \"gm_map\": 0.0695, \n  \"iprec_at_recall_0.00\": 0.2572, \n  \"iprec_at_recall_0.10\": 0.1748, \n  \"iprec_at_recall_0.20\": 0.1184, \n  \"iprec_at_recall_0.30\": 0.0963, \n  \"iprec_at_recall_0.40\": 0.0803, \n  \"iprec_at_recall_0.50\": 0.0613, \n  \"iprec_at_recall_0.60\": 0.0464, \n  \"iprec_at_recall_0.70\": 0.0332, \n  \"iprec_at_recall_0.80\": 0.0216, \n  \"iprec_at_recall_0.90\": 0.011, \n  \"iprec_at_recall_1.00\": 0.0025, \n  \"map\": 0.0695, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 23.38, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.2199\n}\n'),(2,6,1,'2016-12-21 16:33:08','2016-12-21 16:34:10',0,'','{\n  \"P_10\": 0.462, \n  \"P_100\": 0.2024, \n  \"P_1000\": 0.0378, \n  \"P_15\": 0.416, \n  \"P_20\": 0.386, \n  \"P_200\": 0.1341, \n  \"P_30\": 0.3307, \n  \"P_5\": 0.492, \n  \"P_500\": 0.068, \n  \"Rprec\": 0.3275, \n  \"bpref\": 0.2942, \n  \"gm_map\": 0.3113, \n  \"iprec_at_recall_0.00\": 0.7525, \n  \"iprec_at_recall_0.10\": 0.6023, \n  \"iprec_at_recall_0.20\": 0.5163, \n  \"iprec_at_recall_0.30\": 0.4165, \n  \"iprec_at_recall_0.40\": 0.3601, \n  \"iprec_at_recall_0.50\": 0.3091, \n  \"iprec_at_recall_0.60\": 0.2503, \n  \"iprec_at_recall_0.70\": 0.189, \n  \"iprec_at_recall_0.80\": 0.1451, \n  \"iprec_at_recall_0.90\": 0.0963, \n  \"iprec_at_recall_1.00\": 0.0555, \n  \"map\": 0.3113, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 37.8, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.7156\n}\n'),(3,1,1,'2016-04-19 14:32:17','2016-04-19 14:33:12',1,'trec_eval.get_results: Malformed line 1\ntrec_eval: Quit in file \'/results/412\'\n\n',''),(4,6,2,'2016-04-19 21:27:19','2016-04-19 21:30:17',0,'','{\n  \"P_10\": 0.48, \n  \"P_100\": 0.3531, \n  \"P_1000\": 0.1244, \n  \"P_15\": 0.4778, \n  \"P_20\": 0.4627, \n  \"P_200\": 0.2849, \n  \"P_30\": 0.442, \n  \"P_5\": 0.504, \n  \"P_500\": 0.1896, \n  \"Rprec\": 0.283, \n  \"bpref\": 0.2931, \n  \"gm_map\": 0.2257, \n  \"iprec_at_recall_0.00\": 0.7171, \n  \"iprec_at_recall_0.10\": 0.4563, \n  \"iprec_at_recall_0.20\": 0.3801, \n  \"iprec_at_recall_0.30\": 0.3181, \n  \"iprec_at_recall_0.40\": 0.2681, \n  \"iprec_at_recall_0.50\": 0.2158, \n  \"iprec_at_recall_0.60\": 0.1603, \n  \"iprec_at_recall_0.70\": 0.1066, \n  \"iprec_at_recall_0.80\": 0.069, \n  \"iprec_at_recall_0.90\": 0.0336, \n  \"iprec_at_recall_1.00\": 0.0052, \n  \"map\": 0.2257, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 124.3867, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.6597\n}\n'),(6,6,3,'2016-04-19 21:27:19','2016-04-19 21:29:59',0,'','{\n  \"P_10\": 0.4193, \n  \"P_100\": 0.1788, \n  \"P_1000\": 0.0406, \n  \"P_15\": 0.3863, \n  \"P_20\": 0.348, \n  \"P_200\": 0.1216, \n  \"P_30\": 0.3021, \n  \"P_5\": 0.4667, \n  \"P_500\": 0.0676, \n  \"Rprec\": 0.2863, \n  \"bpref\": 0.2513, \n  \"gm_map\": 0.2443, \n  \"iprec_at_recall_0.00\": 0.7164, \n  \"iprec_at_recall_0.10\": 0.5153, \n  \"iprec_at_recall_0.20\": 0.4093, \n  \"iprec_at_recall_0.30\": 0.3287, \n  \"iprec_at_recall_0.40\": 0.2667, \n  \"iprec_at_recall_0.50\": 0.2242, \n  \"iprec_at_recall_0.60\": 0.1671, \n  \"iprec_at_recall_0.70\": 0.1334, \n  \"iprec_at_recall_0.80\": 0.0897, \n  \"iprec_at_recall_0.90\": 0.0598, \n  \"iprec_at_recall_1.00\": 0.0335, \n  \"map\": 0.2443, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 40.5582, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6754\n}\n'),(7,3,2,'2016-04-19 20:35:33','2016-04-19 20:36:49',0,'','{\n  \"P_10\": 0.0467, \n  \"P_100\": 0.0479, \n  \"P_1000\": 0.0343, \n  \"P_15\": 0.0462, \n  \"P_20\": 0.046, \n  \"P_200\": 0.0479, \n  \"P_30\": 0.0456, \n  \"P_5\": 0.048, \n  \"P_500\": 0.0411, \n  \"Rprec\": 0.0483, \n  \"bpref\": 0.071, \n  \"gm_map\": 0.0271, \n  \"iprec_at_recall_0.00\": 0.1233, \n  \"iprec_at_recall_0.10\": 0.0593, \n  \"iprec_at_recall_0.20\": 0.0508, \n  \"iprec_at_recall_0.30\": 0.0428, \n  \"iprec_at_recall_0.40\": 0.0313, \n  \"iprec_at_recall_0.50\": 0.028, \n  \"iprec_at_recall_0.60\": 0.0187, \n  \"iprec_at_recall_0.70\": 0.01, \n  \"iprec_at_recall_0.80\": 0.0055, \n  \"iprec_at_recall_0.90\": 0.0037, \n  \"iprec_at_recall_1.00\": 0.0004, \n  \"map\": 0.0271, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 34.2733, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.0917\n}\n'),(8,3,3,'2016-04-19 20:35:33','2016-04-19 20:37:40',0,'','{\n  \"P_10\": 0.0831, \n  \"P_100\": 0.0495, \n  \"P_1000\": 0.0196, \n  \"P_15\": 0.0793, \n  \"P_20\": 0.0743, \n  \"P_200\": 0.0388, \n  \"P_30\": 0.068, \n  \"P_5\": 0.0876, \n  \"P_500\": 0.0273, \n  \"Rprec\": 0.0658, \n  \"bpref\": 0.0717, \n  \"gm_map\": 0.0458, \n  \"iprec_at_recall_0.00\": 0.1974, \n  \"iprec_at_recall_0.10\": 0.1035, \n  \"iprec_at_recall_0.20\": 0.0747, \n  \"iprec_at_recall_0.30\": 0.0605, \n  \"iprec_at_recall_0.40\": 0.0471, \n  \"iprec_at_recall_0.50\": 0.0392, \n  \"iprec_at_recall_0.60\": 0.0307, \n  \"iprec_at_recall_0.70\": 0.023, \n  \"iprec_at_recall_0.80\": 0.0153, \n  \"iprec_at_recall_0.90\": 0.0108, \n  \"iprec_at_recall_1.00\": 0.0076, \n  \"map\": 0.0458, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 19.5622, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.1724\n}\n'),(9,1,2,'2016-04-29 14:08:50','2016-04-29 14:18:22',1,'trec_eval.get_results: Malformed line 1\ntrec_eval: Quit in file \'/results/155\'\n\n',''),(13,9,1,'2016-07-18 02:05:45','2016-07-18 02:07:10',0,'','{\n  \"P_10\": 0.436, \n  \"P_100\": 0.1894, \n  \"P_1000\": 0.0353, \n  \"P_15\": 0.3907, \n  \"P_20\": 0.363, \n  \"P_200\": 0.1274, \n  \"P_30\": 0.312, \n  \"P_5\": 0.472, \n  \"P_500\": 0.0651, \n  \"Rprec\": 0.3173, \n  \"bpref\": 0.2727, \n  \"gm_map\": 0.2797, \n  \"iprec_at_recall_0.00\": 0.7266, \n  \"iprec_at_recall_0.10\": 0.5868, \n  \"iprec_at_recall_0.20\": 0.4836, \n  \"iprec_at_recall_0.30\": 0.3917, \n  \"iprec_at_recall_0.40\": 0.3128, \n  \"iprec_at_recall_0.50\": 0.2528, \n  \"iprec_at_recall_0.60\": 0.1892, \n  \"iprec_at_recall_0.70\": 0.1674, \n  \"iprec_at_recall_0.80\": 0.1206, \n  \"iprec_at_recall_0.90\": 0.0796, \n  \"iprec_at_recall_1.00\": 0.0441, \n  \"map\": 0.2797, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 35.28, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.6768\n}\n'),(14,9,2,'2016-07-18 02:05:44','2016-07-18 02:07:05',0,'','{\n  \"P_10\": 0.5047, \n  \"P_100\": 0.3424, \n  \"P_1000\": 0.1076, \n  \"P_15\": 0.4813, \n  \"P_20\": 0.464, \n  \"P_200\": 0.2663, \n  \"P_30\": 0.4429, \n  \"P_5\": 0.5173, \n  \"P_500\": 0.1701, \n  \"Rprec\": 0.2664, \n  \"bpref\": 0.2738, \n  \"gm_map\": 0.206, \n  \"iprec_at_recall_0.00\": 0.7338, \n  \"iprec_at_recall_0.10\": 0.4583, \n  \"iprec_at_recall_0.20\": 0.3537, \n  \"iprec_at_recall_0.30\": 0.2901, \n  \"iprec_at_recall_0.40\": 0.2342, \n  \"iprec_at_recall_0.50\": 0.1792, \n  \"iprec_at_recall_0.60\": 0.135, \n  \"iprec_at_recall_0.70\": 0.0844, \n  \"iprec_at_recall_0.80\": 0.0506, \n  \"iprec_at_recall_0.90\": 0.0216, \n  \"iprec_at_recall_1.00\": 0.0026, \n  \"map\": 0.206, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 107.56, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.6845\n}\n'),(15,9,3,'2016-07-18 02:05:45','2016-07-18 02:08:56',0,'','{\n  \"P_10\": 0.4269, \n  \"P_100\": 0.1721, \n  \"P_1000\": 0.0352, \n  \"P_15\": 0.3815, \n  \"P_20\": 0.3444, \n  \"P_200\": 0.1138, \n  \"P_30\": 0.2969, \n  \"P_5\": 0.4908, \n  \"P_500\": 0.0609, \n  \"Rprec\": 0.2737, \n  \"bpref\": 0.2446, \n  \"gm_map\": 0.2301, \n  \"iprec_at_recall_0.00\": 0.7066, \n  \"iprec_at_recall_0.10\": 0.5112, \n  \"iprec_at_recall_0.20\": 0.3981, \n  \"iprec_at_recall_0.30\": 0.3218, \n  \"iprec_at_recall_0.40\": 0.2453, \n  \"iprec_at_recall_0.50\": 0.2054, \n  \"iprec_at_recall_0.60\": 0.1448, \n  \"iprec_at_recall_0.70\": 0.1105, \n  \"iprec_at_recall_0.80\": 0.0704, \n  \"iprec_at_recall_0.90\": 0.047, \n  \"iprec_at_recall_1.00\": 0.0268, \n  \"map\": 0.2301, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 35.2129, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6641\n}\n'),(16,8,2,'2016-07-18 02:11:42','2016-07-18 02:16:16',0,'','{\n  \"P_10\": 0.442, \n  \"P_100\": 0.3239, \n  \"P_1000\": 0.1157, \n  \"P_15\": 0.4293, \n  \"P_20\": 0.4143, \n  \"P_200\": 0.2594, \n  \"P_30\": 0.4018, \n  \"P_5\": 0.4573, \n  \"P_500\": 0.1748, \n  \"Rprec\": 0.2577, \n  \"bpref\": 0.2802, \n  \"gm_map\": 0.2039, \n  \"iprec_at_recall_0.00\": 0.6481, \n  \"iprec_at_recall_0.10\": 0.4212, \n  \"iprec_at_recall_0.20\": 0.343, \n  \"iprec_at_recall_0.30\": 0.2891, \n  \"iprec_at_recall_0.40\": 0.2389, \n  \"iprec_at_recall_0.50\": 0.1947, \n  \"iprec_at_recall_0.60\": 0.151, \n  \"iprec_at_recall_0.70\": 0.0979, \n  \"iprec_at_recall_0.80\": 0.0622, \n  \"iprec_at_recall_0.90\": 0.0266, \n  \"iprec_at_recall_1.00\": 0.0017, \n  \"map\": 0.2039, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 115.6867, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.5956\n}\n'),(17,8,3,'2016-07-18 02:11:42','2016-07-18 02:14:10',0,'','{\n  \"P_10\": 0.4261, \n  \"P_100\": 0.1792, \n  \"P_1000\": 0.0407, \n  \"P_15\": 0.3912, \n  \"P_20\": 0.3558, \n  \"P_200\": 0.1217, \n  \"P_30\": 0.3062, \n  \"P_5\": 0.49, \n  \"P_500\": 0.0683, \n  \"Rprec\": 0.2905, \n  \"bpref\": 0.2569, \n  \"gm_map\": 0.2478, \n  \"iprec_at_recall_0.00\": 0.7156, \n  \"iprec_at_recall_0.10\": 0.526, \n  \"iprec_at_recall_0.20\": 0.424, \n  \"iprec_at_recall_0.30\": 0.3413, \n  \"iprec_at_recall_0.40\": 0.2724, \n  \"iprec_at_recall_0.50\": 0.2267, \n  \"iprec_at_recall_0.60\": 0.1725, \n  \"iprec_at_recall_0.70\": 0.1337, \n  \"iprec_at_recall_0.80\": 0.0819, \n  \"iprec_at_recall_0.90\": 0.0522, \n  \"iprec_at_recall_1.00\": 0.0276, \n  \"map\": 0.2478, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 40.6546, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6708\n}\n'),(18,8,1,'2016-07-18 02:11:42','2016-07-18 02:14:13',0,'','{\n  \"P_10\": 0.49, \n  \"P_100\": 0.203, \n  \"P_1000\": 0.0382, \n  \"P_15\": 0.4227, \n  \"P_20\": 0.388, \n  \"P_200\": 0.1361, \n  \"P_30\": 0.334, \n  \"P_5\": 0.5, \n  \"P_500\": 0.0688, \n  \"Rprec\": 0.3424, \n  \"bpref\": 0.2984, \n  \"gm_map\": 0.315, \n  \"iprec_at_recall_0.00\": 0.752, \n  \"iprec_at_recall_0.10\": 0.6251, \n  \"iprec_at_recall_0.20\": 0.5202, \n  \"iprec_at_recall_0.30\": 0.4439, \n  \"iprec_at_recall_0.40\": 0.3794, \n  \"iprec_at_recall_0.50\": 0.3058, \n  \"iprec_at_recall_0.60\": 0.2392, \n  \"iprec_at_recall_0.70\": 0.1906, \n  \"iprec_at_recall_0.80\": 0.145, \n  \"iprec_at_recall_0.90\": 0.092, \n  \"iprec_at_recall_1.00\": 0.0412, \n  \"map\": 0.315, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 38.2, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.7048\n}\n'),(19,10,2,'2016-07-18 03:07:42','2016-07-18 03:09:26',0,'','{\n  \"P_10\": 0.452, \n  \"P_100\": 0.3171, \n  \"P_1000\": 0.1111, \n  \"P_15\": 0.4364, \n  \"P_20\": 0.421, \n  \"P_200\": 0.2541, \n  \"P_30\": 0.4007, \n  \"P_5\": 0.4587, \n  \"P_500\": 0.1688, \n  \"Rprec\": 0.2571, \n  \"bpref\": 0.2774, \n  \"gm_map\": 0.1969, \n  \"iprec_at_recall_0.00\": 0.6664, \n  \"iprec_at_recall_0.10\": 0.4173, \n  \"iprec_at_recall_0.20\": 0.3408, \n  \"iprec_at_recall_0.30\": 0.2703, \n  \"iprec_at_recall_0.40\": 0.2129, \n  \"iprec_at_recall_0.50\": 0.1724, \n  \"iprec_at_recall_0.60\": 0.1401, \n  \"iprec_at_recall_0.70\": 0.0975, \n  \"iprec_at_recall_0.80\": 0.0699, \n  \"iprec_at_recall_0.90\": 0.0329, \n  \"iprec_at_recall_1.00\": 0.0053, \n  \"map\": 0.1969, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 111.14, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.6108\n}\n'),(20,10,3,'2016-07-18 03:07:42','2016-07-18 03:09:47',0,'','{\n  \"P_10\": 0.4177, \n  \"P_100\": 0.1794, \n  \"P_1000\": 0.0393, \n  \"P_15\": 0.3783, \n  \"P_20\": 0.35, \n  \"P_200\": 0.1214, \n  \"P_30\": 0.3027, \n  \"P_5\": 0.4691, \n  \"P_500\": 0.0655, \n  \"Rprec\": 0.2813, \n  \"bpref\": 0.255, \n  \"gm_map\": 0.2435, \n  \"iprec_at_recall_0.00\": 0.7082, \n  \"iprec_at_recall_0.10\": 0.5078, \n  \"iprec_at_recall_0.20\": 0.4023, \n  \"iprec_at_recall_0.30\": 0.3286, \n  \"iprec_at_recall_0.40\": 0.2567, \n  \"iprec_at_recall_0.50\": 0.221, \n  \"iprec_at_recall_0.60\": 0.1706, \n  \"iprec_at_recall_0.70\": 0.1365, \n  \"iprec_at_recall_0.80\": 0.0949, \n  \"iprec_at_recall_0.90\": 0.0673, \n  \"iprec_at_recall_1.00\": 0.0376, \n  \"map\": 0.2435, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 39.2731, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6746\n}\n'),(21,10,1,'2016-07-18 03:07:42','2016-07-18 03:10:08',0,'','{\n  \"P_10\": 0.452, \n  \"P_100\": 0.197, \n  \"P_1000\": 0.0371, \n  \"P_15\": 0.3853, \n  \"P_20\": 0.358, \n  \"P_200\": 0.1357, \n  \"P_30\": 0.3113, \n  \"P_5\": 0.488, \n  \"P_500\": 0.0673, \n  \"Rprec\": 0.3089, \n  \"bpref\": 0.2774, \n  \"gm_map\": 0.2957, \n  \"iprec_at_recall_0.00\": 0.7185, \n  \"iprec_at_recall_0.10\": 0.5991, \n  \"iprec_at_recall_0.20\": 0.4873, \n  \"iprec_at_recall_0.30\": 0.3999, \n  \"iprec_at_recall_0.40\": 0.3365, \n  \"iprec_at_recall_0.50\": 0.2891, \n  \"iprec_at_recall_0.60\": 0.2349, \n  \"iprec_at_recall_0.70\": 0.1713, \n  \"iprec_at_recall_0.80\": 0.1346, \n  \"iprec_at_recall_0.90\": 0.1019, \n  \"iprec_at_recall_1.00\": 0.0637, \n  \"map\": 0.2957, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 37.08, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.6625\n}\n'),(22,12,2,'2016-07-20 14:32:30','2016-07-20 14:38:45',0,'','{\n  \"P_10\": 0.4967, \n  \"P_100\": 0.3579, \n  \"P_1000\": 0.1249, \n  \"P_15\": 0.4862, \n  \"P_20\": 0.467, \n  \"P_200\": 0.2874, \n  \"P_30\": 0.4476, \n  \"P_5\": 0.52, \n  \"P_500\": 0.1887, \n  \"Rprec\": 0.2852, \n  \"bpref\": 0.2945, \n  \"gm_map\": 0.232, \n  \"iprec_at_recall_0.00\": 0.7073, \n  \"iprec_at_recall_0.10\": 0.4685, \n  \"iprec_at_recall_0.20\": 0.3912, \n  \"iprec_at_recall_0.30\": 0.3272, \n  \"iprec_at_recall_0.40\": 0.2722, \n  \"iprec_at_recall_0.50\": 0.2244, \n  \"iprec_at_recall_0.60\": 0.1702, \n  \"iprec_at_recall_0.70\": 0.1076, \n  \"iprec_at_recall_0.80\": 0.0686, \n  \"iprec_at_recall_0.90\": 0.032, \n  \"iprec_at_recall_1.00\": 0.0027, \n  \"map\": 0.232, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 124.8667, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.651\n}\n'),(23,12,3,'2016-07-20 14:32:30','2016-07-20 14:35:41',0,'','{\n  \"P_10\": 0.4189, \n  \"P_100\": 0.1711, \n  \"P_1000\": 0.04, \n  \"P_15\": 0.3772, \n  \"P_20\": 0.3402, \n  \"P_200\": 0.1158, \n  \"P_30\": 0.2944, \n  \"P_5\": 0.4803, \n  \"P_500\": 0.0658, \n  \"Rprec\": 0.2777, \n  \"bpref\": 0.2461, \n  \"gm_map\": 0.2387, \n  \"iprec_at_recall_0.00\": 0.7209, \n  \"iprec_at_recall_0.10\": 0.5145, \n  \"iprec_at_recall_0.20\": 0.4086, \n  \"iprec_at_recall_0.30\": 0.3238, \n  \"iprec_at_recall_0.40\": 0.2562, \n  \"iprec_at_recall_0.50\": 0.2154, \n  \"iprec_at_recall_0.60\": 0.158, \n  \"iprec_at_recall_0.70\": 0.1226, \n  \"iprec_at_recall_0.80\": 0.0792, \n  \"iprec_at_recall_0.90\": 0.0525, \n  \"iprec_at_recall_1.00\": 0.0277, \n  \"map\": 0.2387, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 39.9518, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6864\n}\n'),(24,12,1,'2016-07-20 14:32:30','2016-07-20 14:35:26',0,'','{\n  \"P_10\": 0.488, \n  \"P_100\": 0.186, \n  \"P_1000\": 0.0367, \n  \"P_15\": 0.4227, \n  \"P_20\": 0.376, \n  \"P_200\": 0.1277, \n  \"P_30\": 0.3253, \n  \"P_5\": 0.5, \n  \"P_500\": 0.0662, \n  \"Rprec\": 0.3314, \n  \"bpref\": 0.2871, \n  \"gm_map\": 0.2936, \n  \"iprec_at_recall_0.00\": 0.7494, \n  \"iprec_at_recall_0.10\": 0.6052, \n  \"iprec_at_recall_0.20\": 0.4979, \n  \"iprec_at_recall_0.30\": 0.4178, \n  \"iprec_at_recall_0.40\": 0.3457, \n  \"iprec_at_recall_0.50\": 0.2795, \n  \"iprec_at_recall_0.60\": 0.2193, \n  \"iprec_at_recall_0.70\": 0.1768, \n  \"iprec_at_recall_0.80\": 0.1232, \n  \"iprec_at_recall_0.90\": 0.0673, \n  \"iprec_at_recall_1.00\": 0.0229, \n  \"map\": 0.2936, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 36.74, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.7065\n}\n'),(25,13,2,'2016-07-22 01:27:14','2016-07-22 01:34:08',0,'','{\n  \"P_10\": 0.47, \n  \"P_100\": 0.321, \n  \"P_1000\": 0.1028, \n  \"P_15\": 0.4542, \n  \"P_20\": 0.4433, \n  \"P_200\": 0.2514, \n  \"P_30\": 0.418, \n  \"P_5\": 0.4787, \n  \"P_500\": 0.1599, \n  \"Rprec\": 0.2528, \n  \"bpref\": 0.2646, \n  \"gm_map\": 0.1885, \n  \"iprec_at_recall_0.00\": 0.6884, \n  \"iprec_at_recall_0.10\": 0.411, \n  \"iprec_at_recall_0.20\": 0.3358, \n  \"iprec_at_recall_0.30\": 0.2794, \n  \"iprec_at_recall_0.40\": 0.221, \n  \"iprec_at_recall_0.50\": 0.167, \n  \"iprec_at_recall_0.60\": 0.1167, \n  \"iprec_at_recall_0.70\": 0.067, \n  \"iprec_at_recall_0.80\": 0.0332, \n  \"iprec_at_recall_0.90\": 0.0065, \n  \"iprec_at_recall_1.00\": 0.0005, \n  \"map\": 0.1885, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 102.8133, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.6455\n}\n'),(26,13,3,'2016-07-22 01:27:15','2016-07-22 01:30:44',0,'','{\n  \"P_10\": 0.4137, \n  \"P_100\": 0.168, \n  \"P_1000\": 0.0363, \n  \"P_15\": 0.3759, \n  \"P_20\": 0.344, \n  \"P_200\": 0.1114, \n  \"P_30\": 0.294, \n  \"P_5\": 0.4771, \n  \"P_500\": 0.0608, \n  \"Rprec\": 0.2661, \n  \"bpref\": 0.2354, \n  \"gm_map\": 0.2194, \n  \"iprec_at_recall_0.00\": 0.7118, \n  \"iprec_at_recall_0.10\": 0.5101, \n  \"iprec_at_recall_0.20\": 0.4018, \n  \"iprec_at_recall_0.30\": 0.3061, \n  \"iprec_at_recall_0.40\": 0.2347, \n  \"iprec_at_recall_0.50\": 0.1892, \n  \"iprec_at_recall_0.60\": 0.1312, \n  \"iprec_at_recall_0.70\": 0.0917, \n  \"iprec_at_recall_0.80\": 0.0514, \n  \"iprec_at_recall_0.90\": 0.0289, \n  \"iprec_at_recall_1.00\": 0.0193, \n  \"map\": 0.2194, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 36.253, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6701\n}\n'),(27,13,1,'2016-07-22 01:27:15','2016-07-22 01:30:20',0,'','{\n  \"P_10\": 0.448, \n  \"P_100\": 0.1708, \n  \"P_1000\": 0.0307, \n  \"P_15\": 0.3907, \n  \"P_20\": 0.352, \n  \"P_200\": 0.1107, \n  \"P_30\": 0.2993, \n  \"P_5\": 0.468, \n  \"P_500\": 0.0552, \n  \"Rprec\": 0.3063, \n  \"bpref\": 0.2588, \n  \"gm_map\": 0.243, \n  \"iprec_at_recall_0.00\": 0.7257, \n  \"iprec_at_recall_0.10\": 0.5725, \n  \"iprec_at_recall_0.20\": 0.4647, \n  \"iprec_at_recall_0.30\": 0.3635, \n  \"iprec_at_recall_0.40\": 0.2965, \n  \"iprec_at_recall_0.50\": 0.2572, \n  \"iprec_at_recall_0.60\": 0.1563, \n  \"iprec_at_recall_0.70\": 0.089, \n  \"iprec_at_recall_0.80\": 0.03, \n  \"iprec_at_recall_0.90\": 0.0077, \n  \"iprec_at_recall_1.00\": 0.0023, \n  \"map\": 0.243, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 30.66, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.6684\n}\n'),(28,14,2,'2016-07-22 01:37:48','2016-07-22 01:39:07',0,'','{\n  \"P_10\": 0.492, \n  \"P_100\": 0.339, \n  \"P_1000\": 0.1078, \n  \"P_15\": 0.4689, \n  \"P_20\": 0.4587, \n  \"P_200\": 0.2655, \n  \"P_30\": 0.4407, \n  \"P_5\": 0.5253, \n  \"P_500\": 0.1698, \n  \"Rprec\": 0.2633, \n  \"bpref\": 0.2716, \n  \"gm_map\": 0.2029, \n  \"iprec_at_recall_0.00\": 0.7297, \n  \"iprec_at_recall_0.10\": 0.443, \n  \"iprec_at_recall_0.20\": 0.3467, \n  \"iprec_at_recall_0.30\": 0.2818, \n  \"iprec_at_recall_0.40\": 0.2325, \n  \"iprec_at_recall_0.50\": 0.1767, \n  \"iprec_at_recall_0.60\": 0.1323, \n  \"iprec_at_recall_0.70\": 0.0849, \n  \"iprec_at_recall_0.80\": 0.0521, \n  \"iprec_at_recall_0.90\": 0.0218, \n  \"iprec_at_recall_1.00\": 0.0028, \n  \"map\": 0.2029, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 107.7733, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.6765\n}\n'),(29,14,3,'2016-07-22 01:37:48','2016-07-22 01:39:50',0,'','{\n  \"P_10\": 0.4173, \n  \"P_100\": 0.1753, \n  \"P_1000\": 0.036, \n  \"P_15\": 0.3807, \n  \"P_20\": 0.3434, \n  \"P_200\": 0.1155, \n  \"P_30\": 0.2963, \n  \"P_5\": 0.4884, \n  \"P_500\": 0.0621, \n  \"Rprec\": 0.2734, \n  \"bpref\": 0.2441, \n  \"gm_map\": 0.2313, \n  \"iprec_at_recall_0.00\": 0.7142, \n  \"iprec_at_recall_0.10\": 0.5115, \n  \"iprec_at_recall_0.20\": 0.3961, \n  \"iprec_at_recall_0.30\": 0.3157, \n  \"iprec_at_recall_0.40\": 0.2449, \n  \"iprec_at_recall_0.50\": 0.2072, \n  \"iprec_at_recall_0.60\": 0.1484, \n  \"iprec_at_recall_0.70\": 0.1145, \n  \"iprec_at_recall_0.80\": 0.0774, \n  \"iprec_at_recall_0.90\": 0.0492, \n  \"iprec_at_recall_1.00\": 0.0277, \n  \"map\": 0.2313, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 35.9518, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6732\n}\n'),(30,14,1,'2016-07-22 01:37:48','2016-07-22 01:40:13',0,'','{\n  \"P_10\": 0.44, \n  \"P_100\": 0.1872, \n  \"P_1000\": 0.0356, \n  \"P_15\": 0.3893, \n  \"P_20\": 0.36, \n  \"P_200\": 0.1304, \n  \"P_30\": 0.31, \n  \"P_5\": 0.46, \n  \"P_500\": 0.0653, \n  \"Rprec\": 0.3139, \n  \"bpref\": 0.2692, \n  \"gm_map\": 0.2747, \n  \"iprec_at_recall_0.00\": 0.7136, \n  \"iprec_at_recall_0.10\": 0.5652, \n  \"iprec_at_recall_0.20\": 0.4719, \n  \"iprec_at_recall_0.30\": 0.3951, \n  \"iprec_at_recall_0.40\": 0.3084, \n  \"iprec_at_recall_0.50\": 0.2401, \n  \"iprec_at_recall_0.60\": 0.1876, \n  \"iprec_at_recall_0.70\": 0.1643, \n  \"iprec_at_recall_0.80\": 0.1246, \n  \"iprec_at_recall_0.90\": 0.0918, \n  \"iprec_at_recall_1.00\": 0.0492, \n  \"map\": 0.2747, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 35.62, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.6569\n}\n'),(31,15,2,'2016-07-22 01:41:23','2016-07-22 01:43:01',0,'','{\n  \"P_10\": 0.506, \n  \"P_100\": 0.3422, \n  \"P_1000\": 0.1074, \n  \"P_15\": 0.4813, \n  \"P_20\": 0.4637, \n  \"P_200\": 0.2661, \n  \"P_30\": 0.4431, \n  \"P_5\": 0.5213, \n  \"P_500\": 0.1699, \n  \"Rprec\": 0.266, \n  \"bpref\": 0.2735, \n  \"gm_map\": 0.2057, \n  \"iprec_at_recall_0.00\": 0.7313, \n  \"iprec_at_recall_0.10\": 0.4575, \n  \"iprec_at_recall_0.20\": 0.3531, \n  \"iprec_at_recall_0.30\": 0.2899, \n  \"iprec_at_recall_0.40\": 0.2337, \n  \"iprec_at_recall_0.50\": 0.1786, \n  \"iprec_at_recall_0.60\": 0.1347, \n  \"iprec_at_recall_0.70\": 0.0843, \n  \"iprec_at_recall_0.80\": 0.0507, \n  \"iprec_at_recall_0.90\": 0.0216, \n  \"iprec_at_recall_1.00\": 0.0027, \n  \"map\": 0.2057, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 107.4333, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.6843\n}\n'),(32,15,3,'2016-07-22 01:41:23','2016-07-22 01:43:43',0,'','{\n  \"P_10\": 0.4265, \n  \"P_100\": 0.172, \n  \"P_1000\": 0.0352, \n  \"P_15\": 0.3829, \n  \"P_20\": 0.344, \n  \"P_200\": 0.1137, \n  \"P_30\": 0.2971, \n  \"P_5\": 0.4932, \n  \"P_500\": 0.0609, \n  \"Rprec\": 0.2739, \n  \"bpref\": 0.2451, \n  \"gm_map\": 0.2304, \n  \"iprec_at_recall_0.00\": 0.7093, \n  \"iprec_at_recall_0.10\": 0.5123, \n  \"iprec_at_recall_0.20\": 0.3985, \n  \"iprec_at_recall_0.30\": 0.3215, \n  \"iprec_at_recall_0.40\": 0.2455, \n  \"iprec_at_recall_0.50\": 0.2056, \n  \"iprec_at_recall_0.60\": 0.1445, \n  \"iprec_at_recall_0.70\": 0.1112, \n  \"iprec_at_recall_0.80\": 0.0708, \n  \"iprec_at_recall_0.90\": 0.0471, \n  \"iprec_at_recall_1.00\": 0.0269, \n  \"map\": 0.2304, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 35.2249, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6672\n}\n'),(33,15,1,'2016-07-22 01:41:23','2016-07-22 01:44:08',0,'','{\n  \"P_10\": 0.442, \n  \"P_100\": 0.1902, \n  \"P_1000\": 0.0354, \n  \"P_15\": 0.392, \n  \"P_20\": 0.363, \n  \"P_200\": 0.1276, \n  \"P_30\": 0.312, \n  \"P_5\": 0.468, \n  \"P_500\": 0.0651, \n  \"Rprec\": 0.3177, \n  \"bpref\": 0.2724, \n  \"gm_map\": 0.2789, \n  \"iprec_at_recall_0.00\": 0.7276, \n  \"iprec_at_recall_0.10\": 0.5878, \n  \"iprec_at_recall_0.20\": 0.4885, \n  \"iprec_at_recall_0.30\": 0.3891, \n  \"iprec_at_recall_0.40\": 0.3119, \n  \"iprec_at_recall_0.50\": 0.2525, \n  \"iprec_at_recall_0.60\": 0.1906, \n  \"iprec_at_recall_0.70\": 0.1688, \n  \"iprec_at_recall_0.80\": 0.1215, \n  \"iprec_at_recall_0.90\": 0.0816, \n  \"iprec_at_recall_1.00\": 0.0448, \n  \"map\": 0.2789, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 35.4, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.6754\n}\n'),(34,16,2,'2016-07-22 01:46:06','2016-07-22 01:48:16',0,'','{\n  \"P_10\": 0.4933, \n  \"P_100\": 0.3365, \n  \"P_1000\": 0.1087, \n  \"P_15\": 0.4729, \n  \"P_20\": 0.458, \n  \"P_200\": 0.2638, \n  \"P_30\": 0.4387, \n  \"P_5\": 0.5013, \n  \"P_500\": 0.1686, \n  \"Rprec\": 0.2627, \n  \"bpref\": 0.2733, \n  \"gm_map\": 0.2043, \n  \"iprec_at_recall_0.00\": 0.7182, \n  \"iprec_at_recall_0.10\": 0.44, \n  \"iprec_at_recall_0.20\": 0.3464, \n  \"iprec_at_recall_0.30\": 0.2838, \n  \"iprec_at_recall_0.40\": 0.2278, \n  \"iprec_at_recall_0.50\": 0.1736, \n  \"iprec_at_recall_0.60\": 0.1345, \n  \"iprec_at_recall_0.70\": 0.0957, \n  \"iprec_at_recall_0.80\": 0.0628, \n  \"iprec_at_recall_0.90\": 0.0271, \n  \"iprec_at_recall_1.00\": 0.0049, \n  \"map\": 0.2043, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 108.72, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.6687\n}\n'),(35,16,3,'2016-07-22 01:46:06','2016-07-22 01:48:49',0,'','{\n  \"P_10\": 0.4237, \n  \"P_100\": 0.1781, \n  \"P_1000\": 0.0377, \n  \"P_15\": 0.3839, \n  \"P_20\": 0.3492, \n  \"P_200\": 0.1203, \n  \"P_30\": 0.3003, \n  \"P_5\": 0.4843, \n  \"P_500\": 0.0642, \n  \"Rprec\": 0.2801, \n  \"bpref\": 0.2527, \n  \"gm_map\": 0.2413, \n  \"iprec_at_recall_0.00\": 0.7003, \n  \"iprec_at_recall_0.10\": 0.5154, \n  \"iprec_at_recall_0.20\": 0.4011, \n  \"iprec_at_recall_0.30\": 0.3331, \n  \"iprec_at_recall_0.40\": 0.2649, \n  \"iprec_at_recall_0.50\": 0.2185, \n  \"iprec_at_recall_0.60\": 0.1627, \n  \"iprec_at_recall_0.70\": 0.1277, \n  \"iprec_at_recall_0.80\": 0.0881, \n  \"iprec_at_recall_0.90\": 0.0597, \n  \"iprec_at_recall_1.00\": 0.0331, \n  \"map\": 0.2413, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 37.7108, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6588\n}\n'),(36,16,1,'2016-07-22 01:46:06','2016-07-22 01:49:08',0,'','{\n  \"P_10\": 0.428, \n  \"P_100\": 0.1958, \n  \"P_1000\": 0.0366, \n  \"P_15\": 0.3867, \n  \"P_20\": 0.358, \n  \"P_200\": 0.1327, \n  \"P_30\": 0.304, \n  \"P_5\": 0.472, \n  \"P_500\": 0.0674, \n  \"Rprec\": 0.3134, \n  \"bpref\": 0.275, \n  \"gm_map\": 0.2885, \n  \"iprec_at_recall_0.00\": 0.718, \n  \"iprec_at_recall_0.10\": 0.5841, \n  \"iprec_at_recall_0.20\": 0.4893, \n  \"iprec_at_recall_0.30\": 0.3948, \n  \"iprec_at_recall_0.40\": 0.326, \n  \"iprec_at_recall_0.50\": 0.2696, \n  \"iprec_at_recall_0.60\": 0.2059, \n  \"iprec_at_recall_0.70\": 0.1746, \n  \"iprec_at_recall_0.80\": 0.1322, \n  \"iprec_at_recall_0.90\": 0.1015, \n  \"iprec_at_recall_1.00\": 0.0641, \n  \"map\": 0.2885, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 36.64, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.6672\n}\n'),(37,17,2,'2016-07-22 02:43:49','2016-07-22 02:45:41',0,'','{\n  \"P_10\": 0.49, \n  \"P_100\": 0.3169, \n  \"P_1000\": 0.1018, \n  \"P_15\": 0.4689, \n  \"P_20\": 0.4543, \n  \"P_200\": 0.2523, \n  \"P_30\": 0.426, \n  \"P_5\": 0.5067, \n  \"P_500\": 0.1585, \n  \"Rprec\": 0.2454, \n  \"bpref\": 0.2508, \n  \"gm_map\": 0.1846, \n  \"iprec_at_recall_0.00\": 0.7177, \n  \"iprec_at_recall_0.10\": 0.4262, \n  \"iprec_at_recall_0.20\": 0.3305, \n  \"iprec_at_recall_0.30\": 0.2691, \n  \"iprec_at_recall_0.40\": 0.2175, \n  \"iprec_at_recall_0.50\": 0.1576, \n  \"iprec_at_recall_0.60\": 0.1018, \n  \"iprec_at_recall_0.70\": 0.0547, \n  \"iprec_at_recall_0.80\": 0.0329, \n  \"iprec_at_recall_0.90\": 0.0141, \n  \"iprec_at_recall_1.00\": 0.0005, \n  \"map\": 0.1846, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 101.7933, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.6618\n}\n'),(38,17,3,'2016-07-22 02:43:49','2016-07-22 02:45:52',0,'','{\n  \"P_10\": 0.3783, \n  \"P_100\": 0.1401, \n  \"P_1000\": 0.0312, \n  \"P_15\": 0.3398, \n  \"P_20\": 0.3058, \n  \"P_200\": 0.0924, \n  \"P_30\": 0.2631, \n  \"P_5\": 0.4402, \n  \"P_500\": 0.0516, \n  \"Rprec\": 0.23, \n  \"bpref\": 0.2044, \n  \"gm_map\": 0.1885, \n  \"iprec_at_recall_0.00\": 0.6979, \n  \"iprec_at_recall_0.10\": 0.4595, \n  \"iprec_at_recall_0.20\": 0.3521, \n  \"iprec_at_recall_0.30\": 0.252, \n  \"iprec_at_recall_0.40\": 0.1832, \n  \"iprec_at_recall_0.50\": 0.1462, \n  \"iprec_at_recall_0.60\": 0.1039, \n  \"iprec_at_recall_0.70\": 0.0742, \n  \"iprec_at_recall_0.80\": 0.043, \n  \"iprec_at_recall_0.90\": 0.0242, \n  \"iprec_at_recall_1.00\": 0.0168, \n  \"map\": 0.1885, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 31.2048, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6581\n}\n'),(39,17,1,'2016-07-22 02:43:49','2016-07-22 02:46:09',0,'','{\n  \"P_10\": 0.426, \n  \"P_100\": 0.1434, \n  \"P_1000\": 0.0304, \n  \"P_15\": 0.3747, \n  \"P_20\": 0.336, \n  \"P_200\": 0.0926, \n  \"P_30\": 0.27, \n  \"P_5\": 0.488, \n  \"P_500\": 0.0513, \n  \"Rprec\": 0.279, \n  \"bpref\": 0.2457, \n  \"gm_map\": 0.2363, \n  \"iprec_at_recall_0.00\": 0.702, \n  \"iprec_at_recall_0.10\": 0.5641, \n  \"iprec_at_recall_0.20\": 0.4327, \n  \"iprec_at_recall_0.30\": 0.3482, \n  \"iprec_at_recall_0.40\": 0.2829, \n  \"iprec_at_recall_0.50\": 0.2249, \n  \"iprec_at_recall_0.60\": 0.1455, \n  \"iprec_at_recall_0.70\": 0.0908, \n  \"iprec_at_recall_0.80\": 0.0531, \n  \"iprec_at_recall_0.90\": 0.0322, \n  \"iprec_at_recall_1.00\": 0.009, \n  \"map\": 0.2363, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 30.44, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.6464\n}\n'),(40,18,2,'2016-07-26 02:56:26','2016-07-26 03:00:21',0,'','{\n  \"P_10\": 0.48, \n  \"P_100\": 0.3531, \n  \"P_1000\": 0.1244, \n  \"P_15\": 0.4778, \n  \"P_20\": 0.4627, \n  \"P_200\": 0.2849, \n  \"P_30\": 0.442, \n  \"P_5\": 0.504, \n  \"P_500\": 0.1896, \n  \"Rprec\": 0.2829, \n  \"bpref\": 0.2931, \n  \"gm_map\": 0.2257, \n  \"iprec_at_recall_0.00\": 0.7171, \n  \"iprec_at_recall_0.10\": 0.4563, \n  \"iprec_at_recall_0.20\": 0.3802, \n  \"iprec_at_recall_0.30\": 0.3181, \n  \"iprec_at_recall_0.40\": 0.2681, \n  \"iprec_at_recall_0.50\": 0.2158, \n  \"iprec_at_recall_0.60\": 0.1603, \n  \"iprec_at_recall_0.70\": 0.1066, \n  \"iprec_at_recall_0.80\": 0.069, \n  \"iprec_at_recall_0.90\": 0.0336, \n  \"iprec_at_recall_1.00\": 0.0052, \n  \"map\": 0.2257, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 124.3867, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.6597\n}\n'),(41,18,3,'2016-07-26 02:56:26','2016-07-26 02:59:06',0,'','{\n  \"P_10\": 0.4193, \n  \"P_100\": 0.1788, \n  \"P_1000\": 0.0406, \n  \"P_15\": 0.3863, \n  \"P_20\": 0.348, \n  \"P_200\": 0.1216, \n  \"P_30\": 0.3021, \n  \"P_5\": 0.4667, \n  \"P_500\": 0.0676, \n  \"Rprec\": 0.2863, \n  \"bpref\": 0.2513, \n  \"gm_map\": 0.2443, \n  \"iprec_at_recall_0.00\": 0.7164, \n  \"iprec_at_recall_0.10\": 0.5153, \n  \"iprec_at_recall_0.20\": 0.4093, \n  \"iprec_at_recall_0.30\": 0.3287, \n  \"iprec_at_recall_0.40\": 0.2667, \n  \"iprec_at_recall_0.50\": 0.2242, \n  \"iprec_at_recall_0.60\": 0.1671, \n  \"iprec_at_recall_0.70\": 0.1334, \n  \"iprec_at_recall_0.80\": 0.0897, \n  \"iprec_at_recall_0.90\": 0.0598, \n  \"iprec_at_recall_1.00\": 0.0335, \n  \"map\": 0.2443, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 40.5582, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6754\n}\n'),(42,18,1,'2016-07-26 02:56:27','2016-07-26 02:59:11',0,'','{\n  \"P_10\": 0.462, \n  \"P_100\": 0.2024, \n  \"P_1000\": 0.0378, \n  \"P_15\": 0.416, \n  \"P_20\": 0.386, \n  \"P_200\": 0.1341, \n  \"P_30\": 0.3307, \n  \"P_5\": 0.492, \n  \"P_500\": 0.068, \n  \"Rprec\": 0.3275, \n  \"bpref\": 0.2942, \n  \"gm_map\": 0.3113, \n  \"iprec_at_recall_0.00\": 0.7525, \n  \"iprec_at_recall_0.10\": 0.6023, \n  \"iprec_at_recall_0.20\": 0.5163, \n  \"iprec_at_recall_0.30\": 0.4165, \n  \"iprec_at_recall_0.40\": 0.3601, \n  \"iprec_at_recall_0.50\": 0.3091, \n  \"iprec_at_recall_0.60\": 0.2503, \n  \"iprec_at_recall_0.70\": 0.189, \n  \"iprec_at_recall_0.80\": 0.1451, \n  \"iprec_at_recall_0.90\": 0.0963, \n  \"iprec_at_recall_1.00\": 0.0555, \n  \"map\": 0.3113, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 37.8, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.7156\n}\n'),(43,20,2,'2016-07-26 03:07:24','2016-07-26 03:08:54',0,'','{\n  \"P_10\": 0.4847, \n  \"P_100\": 0.3379, \n  \"P_1000\": 0.1087, \n  \"P_15\": 0.4676, \n  \"P_20\": 0.4587, \n  \"P_200\": 0.2651, \n  \"P_30\": 0.4375, \n  \"P_5\": 0.524, \n  \"P_500\": 0.1702, \n  \"Rprec\": 0.2616, \n  \"bpref\": 0.2719, \n  \"gm_map\": 0.2028, \n  \"iprec_at_recall_0.00\": 0.7287, \n  \"iprec_at_recall_0.10\": 0.4379, \n  \"iprec_at_recall_0.20\": 0.3508, \n  \"iprec_at_recall_0.30\": 0.2795, \n  \"iprec_at_recall_0.40\": 0.2289, \n  \"iprec_at_recall_0.50\": 0.1759, \n  \"iprec_at_recall_0.60\": 0.1311, \n  \"iprec_at_recall_0.70\": 0.0874, \n  \"iprec_at_recall_0.80\": 0.0527, \n  \"iprec_at_recall_0.90\": 0.0247, \n  \"iprec_at_recall_1.00\": 0.0039, \n  \"map\": 0.2028, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 108.6733, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.6827\n}\n'),(44,20,3,'2016-07-26 03:07:24','2016-07-26 03:09:45',0,'','{\n  \"P_10\": 0.4157, \n  \"P_100\": 0.1718, \n  \"P_1000\": 0.0365, \n  \"P_15\": 0.3738, \n  \"P_20\": 0.338, \n  \"P_200\": 0.1153, \n  \"P_30\": 0.2946, \n  \"P_5\": 0.4763, \n  \"P_500\": 0.0626, \n  \"Rprec\": 0.2723, \n  \"bpref\": 0.2413, \n  \"gm_map\": 0.2301, \n  \"iprec_at_recall_0.00\": 0.7309, \n  \"iprec_at_recall_0.10\": 0.5091, \n  \"iprec_at_recall_0.20\": 0.3878, \n  \"iprec_at_recall_0.30\": 0.3113, \n  \"iprec_at_recall_0.40\": 0.2428, \n  \"iprec_at_recall_0.50\": 0.2054, \n  \"iprec_at_recall_0.60\": 0.1449, \n  \"iprec_at_recall_0.70\": 0.1145, \n  \"iprec_at_recall_0.80\": 0.0757, \n  \"iprec_at_recall_0.90\": 0.0478, \n  \"iprec_at_recall_1.00\": 0.0305, \n  \"map\": 0.2301, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 36.4699, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6917\n}\n'),(45,20,1,'2016-07-26 03:07:24','2016-07-26 03:10:09',0,'','{\n  \"P_10\": 0.438, \n  \"P_100\": 0.198, \n  \"P_1000\": 0.0369, \n  \"P_15\": 0.404, \n  \"P_20\": 0.37, \n  \"P_200\": 0.1342, \n  \"P_30\": 0.322, \n  \"P_5\": 0.504, \n  \"P_500\": 0.0676, \n  \"Rprec\": 0.3134, \n  \"bpref\": 0.2781, \n  \"gm_map\": 0.2884, \n  \"iprec_at_recall_0.00\": 0.7429, \n  \"iprec_at_recall_0.10\": 0.5735, \n  \"iprec_at_recall_0.20\": 0.4699, \n  \"iprec_at_recall_0.30\": 0.4026, \n  \"iprec_at_recall_0.40\": 0.3156, \n  \"iprec_at_recall_0.50\": 0.262, \n  \"iprec_at_recall_0.60\": 0.2139, \n  \"iprec_at_recall_0.70\": 0.1853, \n  \"iprec_at_recall_0.80\": 0.1365, \n  \"iprec_at_recall_0.90\": 0.1006, \n  \"iprec_at_recall_1.00\": 0.0529, \n  \"map\": 0.2884, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 36.86, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.6925\n}\n'),(46,21,2,'2016-07-26 03:15:26','2016-07-26 03:16:56',0,'','{\n  \"P_10\": 0.488, \n  \"P_100\": 0.3394, \n  \"P_1000\": 0.1072, \n  \"P_15\": 0.4716, \n  \"P_20\": 0.4557, \n  \"P_200\": 0.2641, \n  \"P_30\": 0.4411, \n  \"P_5\": 0.5093, \n  \"P_500\": 0.1687, \n  \"Rprec\": 0.2638, \n  \"bpref\": 0.2719, \n  \"gm_map\": 0.2023, \n  \"iprec_at_recall_0.00\": 0.7282, \n  \"iprec_at_recall_0.10\": 0.4432, \n  \"iprec_at_recall_0.20\": 0.3496, \n  \"iprec_at_recall_0.30\": 0.2832, \n  \"iprec_at_recall_0.40\": 0.2286, \n  \"iprec_at_recall_0.50\": 0.1763, \n  \"iprec_at_recall_0.60\": 0.1332, \n  \"iprec_at_recall_0.70\": 0.0865, \n  \"iprec_at_recall_0.80\": 0.0492, \n  \"iprec_at_recall_0.90\": 0.0219, \n  \"iprec_at_recall_1.00\": 0.0031, \n  \"map\": 0.2023, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 107.24, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.6768\n}\n'),(47,21,3,'2016-07-26 03:15:26','2016-07-26 03:17:44',0,'','{\n  \"P_10\": 0.4193, \n  \"P_100\": 0.169, \n  \"P_1000\": 0.0352, \n  \"P_15\": 0.3754, \n  \"P_20\": 0.3402, \n  \"P_200\": 0.1115, \n  \"P_30\": 0.2921, \n  \"P_5\": 0.4876, \n  \"P_500\": 0.0606, \n  \"Rprec\": 0.2701, \n  \"bpref\": 0.2389, \n  \"gm_map\": 0.2266, \n  \"iprec_at_recall_0.00\": 0.7285, \n  \"iprec_at_recall_0.10\": 0.5144, \n  \"iprec_at_recall_0.20\": 0.3946, \n  \"iprec_at_recall_0.30\": 0.3038, \n  \"iprec_at_recall_0.40\": 0.2347, \n  \"iprec_at_recall_0.50\": 0.1954, \n  \"iprec_at_recall_0.60\": 0.1427, \n  \"iprec_at_recall_0.70\": 0.109, \n  \"iprec_at_recall_0.80\": 0.0701, \n  \"iprec_at_recall_0.90\": 0.0433, \n  \"iprec_at_recall_1.00\": 0.0262, \n  \"map\": 0.2266, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 35.2048, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6851\n}\n'),(48,21,1,'2016-07-26 03:15:26','2016-07-26 03:18:08',0,'','{\n  \"P_10\": 0.444, \n  \"P_100\": 0.1964, \n  \"P_1000\": 0.0361, \n  \"P_15\": 0.4027, \n  \"P_20\": 0.366, \n  \"P_200\": 0.1304, \n  \"P_30\": 0.3187, \n  \"P_5\": 0.5, \n  \"P_500\": 0.066, \n  \"Rprec\": 0.3105, \n  \"bpref\": 0.2789, \n  \"gm_map\": 0.2876, \n  \"iprec_at_recall_0.00\": 0.7402, \n  \"iprec_at_recall_0.10\": 0.5761, \n  \"iprec_at_recall_0.20\": 0.4823, \n  \"iprec_at_recall_0.30\": 0.4045, \n  \"iprec_at_recall_0.40\": 0.3076, \n  \"iprec_at_recall_0.50\": 0.2544, \n  \"iprec_at_recall_0.60\": 0.2138, \n  \"iprec_at_recall_0.70\": 0.1866, \n  \"iprec_at_recall_0.80\": 0.13, \n  \"iprec_at_recall_0.90\": 0.0949, \n  \"iprec_at_recall_1.00\": 0.045, \n  \"map\": 0.2876, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 36.12, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.6927\n}\n'),(49,11,2,'2016-07-26 03:15:58','2016-07-26 03:20:25',0,'','{\n  \"P_10\": 0.452, \n  \"P_100\": 0.3229, \n  \"P_1000\": 0.1107, \n  \"P_15\": 0.4382, \n  \"P_20\": 0.423, \n  \"P_200\": 0.2561, \n  \"P_30\": 0.4024, \n  \"P_5\": 0.4547, \n  \"P_500\": 0.1695, \n  \"Rprec\": 0.2582, \n  \"bpref\": 0.2791, \n  \"gm_map\": 0.1968, \n  \"iprec_at_recall_0.00\": 0.6698, \n  \"iprec_at_recall_0.10\": 0.4221, \n  \"iprec_at_recall_0.20\": 0.3434, \n  \"iprec_at_recall_0.30\": 0.2722, \n  \"iprec_at_recall_0.40\": 0.2111, \n  \"iprec_at_recall_0.50\": 0.1703, \n  \"iprec_at_recall_0.60\": 0.1375, \n  \"iprec_at_recall_0.70\": 0.0946, \n  \"iprec_at_recall_0.80\": 0.0676, \n  \"iprec_at_recall_0.90\": 0.0321, \n  \"iprec_at_recall_1.00\": 0.0053, \n  \"map\": 0.1968, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 110.68, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.6168\n}\n'),(50,11,3,'2016-07-26 03:15:58','2016-07-26 03:20:48',0,'','{\n  \"P_10\": 0.4112, \n  \"P_100\": 0.1786, \n  \"P_1000\": 0.0398, \n  \"P_15\": 0.374, \n  \"P_20\": 0.3464, \n  \"P_200\": 0.1221, \n  \"P_30\": 0.2997, \n  \"P_5\": 0.4683, \n  \"P_500\": 0.0656, \n  \"Rprec\": 0.278, \n  \"bpref\": 0.2522, \n  \"gm_map\": 0.2414, \n  \"iprec_at_recall_0.00\": 0.7033, \n  \"iprec_at_recall_0.10\": 0.5046, \n  \"iprec_at_recall_0.20\": 0.3987, \n  \"iprec_at_recall_0.30\": 0.3277, \n  \"iprec_at_recall_0.40\": 0.2568, \n  \"iprec_at_recall_0.50\": 0.222, \n  \"iprec_at_recall_0.60\": 0.1695, \n  \"iprec_at_recall_0.70\": 0.1362, \n  \"iprec_at_recall_0.80\": 0.0934, \n  \"iprec_at_recall_0.90\": 0.0678, \n  \"iprec_at_recall_1.00\": 0.0355, \n  \"map\": 0.2414, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 39.8313, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.666\n}\n'),(51,11,1,'2016-07-26 03:15:58','2016-07-26 03:21:08',0,'','{\n  \"P_10\": 0.45, \n  \"P_100\": 0.1986, \n  \"P_1000\": 0.0371, \n  \"P_15\": 0.3867, \n  \"P_20\": 0.359, \n  \"P_200\": 0.1358, \n  \"P_30\": 0.3107, \n  \"P_5\": 0.48, \n  \"P_500\": 0.068, \n  \"Rprec\": 0.3144, \n  \"bpref\": 0.2792, \n  \"gm_map\": 0.2979, \n  \"iprec_at_recall_0.00\": 0.7178, \n  \"iprec_at_recall_0.10\": 0.5984, \n  \"iprec_at_recall_0.20\": 0.4837, \n  \"iprec_at_recall_0.30\": 0.401, \n  \"iprec_at_recall_0.40\": 0.3349, \n  \"iprec_at_recall_0.50\": 0.2895, \n  \"iprec_at_recall_0.60\": 0.24, \n  \"iprec_at_recall_0.70\": 0.1757, \n  \"iprec_at_recall_0.80\": 0.1455, \n  \"iprec_at_recall_0.90\": 0.108, \n  \"iprec_at_recall_1.00\": 0.0685, \n  \"map\": 0.2979, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 37.06, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.6627\n}\n'),(52,19,2,'2016-07-26 03:22:02','2016-07-26 03:25:06',0,'','{\n  \"P_10\": 0.042, \n  \"P_100\": 0.0481, \n  \"P_1000\": 0.0282, \n  \"P_15\": 0.0418, \n  \"P_20\": 0.0403, \n  \"P_200\": 0.0446, \n  \"P_30\": 0.0451, \n  \"P_5\": 0.0387, \n  \"P_500\": 0.0366, \n  \"Rprec\": 0.0439, \n  \"bpref\": 0.0658, \n  \"gm_map\": 0.0256, \n  \"iprec_at_recall_0.00\": 0.0907, \n  \"iprec_at_recall_0.10\": 0.0543, \n  \"iprec_at_recall_0.20\": 0.0462, \n  \"iprec_at_recall_0.30\": 0.0356, \n  \"iprec_at_recall_0.40\": 0.0304, \n  \"iprec_at_recall_0.50\": 0.0239, \n  \"iprec_at_recall_0.60\": 0.0199, \n  \"iprec_at_recall_0.70\": 0.0116, \n  \"iprec_at_recall_0.80\": 0.0062, \n  \"iprec_at_recall_0.90\": 0.0046, \n  \"iprec_at_recall_1.00\": 0.0006, \n  \"map\": 0.0256, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 28.2467, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.0684\n}\n'),(53,19,3,'2016-07-26 03:22:02','2016-07-26 03:24:54',0,'','{\n  \"P_10\": 0.0695, \n  \"P_100\": 0.0371, \n  \"P_1000\": 0.0151, \n  \"P_15\": 0.0651, \n  \"P_20\": 0.0608, \n  \"P_200\": 0.0292, \n  \"P_30\": 0.056, \n  \"P_5\": 0.0699, \n  \"P_500\": 0.0206, \n  \"Rprec\": 0.0511, \n  \"bpref\": 0.0624, \n  \"gm_map\": 0.0369, \n  \"iprec_at_recall_0.00\": 0.1647, \n  \"iprec_at_recall_0.10\": 0.0784, \n  \"iprec_at_recall_0.20\": 0.058, \n  \"iprec_at_recall_0.30\": 0.0452, \n  \"iprec_at_recall_0.40\": 0.0366, \n  \"iprec_at_recall_0.50\": 0.0307, \n  \"iprec_at_recall_0.60\": 0.0258, \n  \"iprec_at_recall_0.70\": 0.0217, \n  \"iprec_at_recall_0.80\": 0.0143, \n  \"iprec_at_recall_0.90\": 0.0121, \n  \"iprec_at_recall_1.00\": 0.0078, \n  \"map\": 0.0369, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 15.0924, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.1488\n}\n'),(54,19,1,'2016-07-26 03:22:02','2016-07-26 03:25:09',0,'','{\n  \"P_10\": 0.08, \n  \"P_100\": 0.0578, \n  \"P_1000\": 0.0188, \n  \"P_15\": 0.0853, \n  \"P_20\": 0.085, \n  \"P_200\": 0.0455, \n  \"P_30\": 0.0747, \n  \"P_5\": 0.064, \n  \"P_500\": 0.0287, \n  \"Rprec\": 0.0639, \n  \"bpref\": 0.0793, \n  \"gm_map\": 0.052, \n  \"iprec_at_recall_0.00\": 0.1582, \n  \"iprec_at_recall_0.10\": 0.1186, \n  \"iprec_at_recall_0.20\": 0.0902, \n  \"iprec_at_recall_0.30\": 0.0805, \n  \"iprec_at_recall_0.40\": 0.0622, \n  \"iprec_at_recall_0.50\": 0.0521, \n  \"iprec_at_recall_0.60\": 0.0377, \n  \"iprec_at_recall_0.70\": 0.0292, \n  \"iprec_at_recall_0.80\": 0.0157, \n  \"iprec_at_recall_0.90\": 0.0094, \n  \"iprec_at_recall_1.00\": 0.0006, \n  \"map\": 0.052, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 18.82, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.1228\n}\n'),(55,22,2,'2016-07-26 03:34:15','2016-07-26 03:39:45',0,'','{\n  \"P_10\": 0.4467, \n  \"P_100\": 0.3005, \n  \"P_1000\": 0.1036, \n  \"P_15\": 0.4267, \n  \"P_20\": 0.4137, \n  \"P_200\": 0.2425, \n  \"P_30\": 0.3898, \n  \"P_5\": 0.4453, \n  \"P_500\": 0.1577, \n  \"Rprec\": 0.2421, \n  \"bpref\": 0.2674, \n  \"gm_map\": 0.1779, \n  \"iprec_at_recall_0.00\": 0.6733, \n  \"iprec_at_recall_0.10\": 0.3856, \n  \"iprec_at_recall_0.20\": 0.305, \n  \"iprec_at_recall_0.30\": 0.2446, \n  \"iprec_at_recall_0.40\": 0.1932, \n  \"iprec_at_recall_0.50\": 0.1537, \n  \"iprec_at_recall_0.60\": 0.1175, \n  \"iprec_at_recall_0.70\": 0.0825, \n  \"iprec_at_recall_0.80\": 0.0539, \n  \"iprec_at_recall_0.90\": 0.024, \n  \"iprec_at_recall_1.00\": 0.0043, \n  \"map\": 0.1779, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 103.6133, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.6055\n}\n'),(56,22,3,'2016-07-26 03:34:16','2016-07-26 03:37:14',0,'','{\n  \"P_10\": 0.4149, \n  \"P_100\": 0.1762, \n  \"P_1000\": 0.0379, \n  \"P_15\": 0.3746, \n  \"P_20\": 0.3484, \n  \"P_200\": 0.1189, \n  \"P_30\": 0.2977, \n  \"P_5\": 0.4755, \n  \"P_500\": 0.0636, \n  \"Rprec\": 0.2809, \n  \"bpref\": 0.2526, \n  \"gm_map\": 0.2365, \n  \"iprec_at_recall_0.00\": 0.7002, \n  \"iprec_at_recall_0.10\": 0.5014, \n  \"iprec_at_recall_0.20\": 0.3963, \n  \"iprec_at_recall_0.30\": 0.3197, \n  \"iprec_at_recall_0.40\": 0.2487, \n  \"iprec_at_recall_0.50\": 0.2159, \n  \"iprec_at_recall_0.60\": 0.1667, \n  \"iprec_at_recall_0.70\": 0.1268, \n  \"iprec_at_recall_0.80\": 0.0846, \n  \"iprec_at_recall_0.90\": 0.0608, \n  \"iprec_at_recall_1.00\": 0.0347, \n  \"map\": 0.2365, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 37.8554, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6506\n}\n'),(57,22,1,'2016-07-26 03:34:16','2016-07-26 03:37:13',0,'','{\n  \"P_10\": 0.398, \n  \"P_100\": 0.1846, \n  \"P_1000\": 0.0353, \n  \"P_15\": 0.356, \n  \"P_20\": 0.319, \n  \"P_200\": 0.1237, \n  \"P_30\": 0.28, \n  \"P_5\": 0.42, \n  \"P_500\": 0.0638, \n  \"Rprec\": 0.273, \n  \"bpref\": 0.2425, \n  \"gm_map\": 0.2527, \n  \"iprec_at_recall_0.00\": 0.6661, \n  \"iprec_at_recall_0.10\": 0.5343, \n  \"iprec_at_recall_0.20\": 0.418, \n  \"iprec_at_recall_0.30\": 0.3409, \n  \"iprec_at_recall_0.40\": 0.2802, \n  \"iprec_at_recall_0.50\": 0.2459, \n  \"iprec_at_recall_0.60\": 0.1867, \n  \"iprec_at_recall_0.70\": 0.1459, \n  \"iprec_at_recall_0.80\": 0.1151, \n  \"iprec_at_recall_0.90\": 0.0797, \n  \"iprec_at_recall_1.00\": 0.0435, \n  \"map\": 0.2527, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 35.26, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.6141\n}\n'),(58,23,2,'2016-07-26 16:22:19','2016-07-26 16:25:11',0,'','{\n  \"P_10\": 0.4547, \n  \"P_100\": 0.3431, \n  \"P_1000\": 0.1204, \n  \"P_15\": 0.4498, \n  \"P_20\": 0.4397, \n  \"P_200\": 0.2759, \n  \"P_30\": 0.4264, \n  \"P_5\": 0.4587, \n  \"P_500\": 0.1825, \n  \"Rprec\": 0.2724, \n  \"bpref\": 0.2884, \n  \"gm_map\": 0.2122, \n  \"iprec_at_recall_0.00\": 0.66, \n  \"iprec_at_recall_0.10\": 0.437, \n  \"iprec_at_recall_0.20\": 0.3635, \n  \"iprec_at_recall_0.30\": 0.3051, \n  \"iprec_at_recall_0.40\": 0.2492, \n  \"iprec_at_recall_0.50\": 0.1984, \n  \"iprec_at_recall_0.60\": 0.1512, \n  \"iprec_at_recall_0.70\": 0.1005, \n  \"iprec_at_recall_0.80\": 0.0617, \n  \"iprec_at_recall_0.90\": 0.0301, \n  \"iprec_at_recall_1.00\": 0.002, \n  \"map\": 0.2122, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 120.4267, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.5845\n}\n'),(59,23,3,'2016-07-26 16:22:19','2016-07-26 16:24:55',0,'','{\n  \"P_10\": 0.4273, \n  \"P_100\": 0.1846, \n  \"P_1000\": 0.0411, \n  \"P_15\": 0.3944, \n  \"P_20\": 0.3655, \n  \"P_200\": 0.1247, \n  \"P_30\": 0.3139, \n  \"P_5\": 0.4876, \n  \"P_500\": 0.0689, \n  \"Rprec\": 0.2939, \n  \"bpref\": 0.2594, \n  \"gm_map\": 0.2519, \n  \"iprec_at_recall_0.00\": 0.7157, \n  \"iprec_at_recall_0.10\": 0.5244, \n  \"iprec_at_recall_0.20\": 0.4239, \n  \"iprec_at_recall_0.30\": 0.3509, \n  \"iprec_at_recall_0.40\": 0.2748, \n  \"iprec_at_recall_0.50\": 0.2314, \n  \"iprec_at_recall_0.60\": 0.1771, \n  \"iprec_at_recall_0.70\": 0.137, \n  \"iprec_at_recall_0.80\": 0.0893, \n  \"iprec_at_recall_0.90\": 0.0547, \n  \"iprec_at_recall_1.00\": 0.0293, \n  \"map\": 0.2519, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 41.0683, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6726\n}\n'),(60,23,1,'2016-07-26 16:22:19','2016-07-26 16:25:10',0,'','{\n  \"P_10\": 0.462, \n  \"P_100\": 0.2018, \n  \"P_1000\": 0.0376, \n  \"P_15\": 0.428, \n  \"P_20\": 0.397, \n  \"P_200\": 0.135, \n  \"P_30\": 0.3273, \n  \"P_5\": 0.496, \n  \"P_500\": 0.0676, \n  \"Rprec\": 0.3328, \n  \"bpref\": 0.2928, \n  \"gm_map\": 0.3089, \n  \"iprec_at_recall_0.00\": 0.7601, \n  \"iprec_at_recall_0.10\": 0.6013, \n  \"iprec_at_recall_0.20\": 0.5068, \n  \"iprec_at_recall_0.30\": 0.4215, \n  \"iprec_at_recall_0.40\": 0.3731, \n  \"iprec_at_recall_0.50\": 0.3209, \n  \"iprec_at_recall_0.60\": 0.2447, \n  \"iprec_at_recall_0.70\": 0.1844, \n  \"iprec_at_recall_0.80\": 0.1431, \n  \"iprec_at_recall_0.90\": 0.087, \n  \"iprec_at_recall_1.00\": 0.0307, \n  \"map\": 0.3089, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 37.58, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.7103\n}\n'),(61,24,2,'2016-07-26 16:26:35','2016-07-26 16:29:35',0,'','{\n  \"P_10\": 0.4853, \n  \"P_100\": 0.3497, \n  \"P_1000\": 0.1203, \n  \"P_15\": 0.4716, \n  \"P_20\": 0.4543, \n  \"P_200\": 0.2794, \n  \"P_30\": 0.4431, \n  \"P_5\": 0.512, \n  \"P_500\": 0.1823, \n  \"Rprec\": 0.2761, \n  \"bpref\": 0.2844, \n  \"gm_map\": 0.2146, \n  \"iprec_at_recall_0.00\": 0.7128, \n  \"iprec_at_recall_0.10\": 0.453, \n  \"iprec_at_recall_0.20\": 0.3758, \n  \"iprec_at_recall_0.30\": 0.308, \n  \"iprec_at_recall_0.40\": 0.252, \n  \"iprec_at_recall_0.50\": 0.1954, \n  \"iprec_at_recall_0.60\": 0.1449, \n  \"iprec_at_recall_0.70\": 0.0906, \n  \"iprec_at_recall_0.80\": 0.0504, \n  \"iprec_at_recall_0.90\": 0.0205, \n  \"iprec_at_recall_1.00\": 0.0021, \n  \"map\": 0.2146, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 120.34, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.6545\n}\n'),(62,24,3,'2016-07-26 16:26:35','2016-07-26 16:28:58',0,'','{\n  \"P_10\": 0.4028, \n  \"P_100\": 0.1656, \n  \"P_1000\": 0.0392, \n  \"P_15\": 0.37, \n  \"P_20\": 0.3384, \n  \"P_200\": 0.1143, \n  \"P_30\": 0.2896, \n  \"P_5\": 0.4691, \n  \"P_500\": 0.0647, \n  \"Rprec\": 0.2665, \n  \"bpref\": 0.2334, \n  \"gm_map\": 0.2256, \n  \"iprec_at_recall_0.00\": 0.7152, \n  \"iprec_at_recall_0.10\": 0.5034, \n  \"iprec_at_recall_0.20\": 0.3951, \n  \"iprec_at_recall_0.30\": 0.3069, \n  \"iprec_at_recall_0.40\": 0.2404, \n  \"iprec_at_recall_0.50\": 0.2, \n  \"iprec_at_recall_0.60\": 0.1452, \n  \"iprec_at_recall_0.70\": 0.106, \n  \"iprec_at_recall_0.80\": 0.0632, \n  \"iprec_at_recall_0.90\": 0.0379, \n  \"iprec_at_recall_1.00\": 0.0192, \n  \"map\": 0.2256, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 39.2129, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6779\n}\n'),(63,24,1,'2016-07-26 16:26:35','2016-07-26 16:29:09',0,'','{\n  \"P_10\": 0.46, \n  \"P_100\": 0.1748, \n  \"P_1000\": 0.0356, \n  \"P_15\": 0.4027, \n  \"P_20\": 0.371, \n  \"P_200\": 0.115, \n  \"P_30\": 0.318, \n  \"P_5\": 0.488, \n  \"P_500\": 0.0615, \n  \"Rprec\": 0.3081, \n  \"bpref\": 0.2706, \n  \"gm_map\": 0.2685, \n  \"iprec_at_recall_0.00\": 0.7328, \n  \"iprec_at_recall_0.10\": 0.5759, \n  \"iprec_at_recall_0.20\": 0.4798, \n  \"iprec_at_recall_0.30\": 0.3979, \n  \"iprec_at_recall_0.40\": 0.3198, \n  \"iprec_at_recall_0.50\": 0.2555, \n  \"iprec_at_recall_0.60\": 0.1984, \n  \"iprec_at_recall_0.70\": 0.1442, \n  \"iprec_at_recall_0.80\": 0.0785, \n  \"iprec_at_recall_0.90\": 0.0325, \n  \"iprec_at_recall_1.00\": 0.0068, \n  \"map\": 0.2685, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 35.62, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.6849\n}\n'),(64,25,2,'2016-07-26 16:33:14','2016-07-26 16:36:30',0,'','{\n  \"P_10\": 0.466, \n  \"P_100\": 0.3376, \n  \"P_1000\": 0.1173, \n  \"P_15\": 0.4538, \n  \"P_20\": 0.4443, \n  \"P_200\": 0.2697, \n  \"P_30\": 0.4282, \n  \"P_5\": 0.4733, \n  \"P_500\": 0.1776, \n  \"Rprec\": 0.2697, \n  \"bpref\": 0.2814, \n  \"gm_map\": 0.208, \n  \"iprec_at_recall_0.00\": 0.6928, \n  \"iprec_at_recall_0.10\": 0.4331, \n  \"iprec_at_recall_0.20\": 0.3558, \n  \"iprec_at_recall_0.30\": 0.2894, \n  \"iprec_at_recall_0.40\": 0.2399, \n  \"iprec_at_recall_0.50\": 0.183, \n  \"iprec_at_recall_0.60\": 0.1443, \n  \"iprec_at_recall_0.70\": 0.097, \n  \"iprec_at_recall_0.80\": 0.0674, \n  \"iprec_at_recall_0.90\": 0.0315, \n  \"iprec_at_recall_1.00\": 0.0048, \n  \"map\": 0.208, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 117.3267, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.6339\n}\n'),(65,25,3,'2016-07-26 16:33:14','2016-07-26 16:35:57',0,'','{\n  \"P_10\": 0.4301, \n  \"P_100\": 0.185, \n  \"P_1000\": 0.0411, \n  \"P_15\": 0.3912, \n  \"P_20\": 0.3624, \n  \"P_200\": 0.126, \n  \"P_30\": 0.3108, \n  \"P_5\": 0.4795, \n  \"P_500\": 0.0685, \n  \"Rprec\": 0.2939, \n  \"bpref\": 0.2616, \n  \"gm_map\": 0.2538, \n  \"iprec_at_recall_0.00\": 0.7246, \n  \"iprec_at_recall_0.10\": 0.5271, \n  \"iprec_at_recall_0.20\": 0.4204, \n  \"iprec_at_recall_0.30\": 0.3478, \n  \"iprec_at_recall_0.40\": 0.2728, \n  \"iprec_at_recall_0.50\": 0.2332, \n  \"iprec_at_recall_0.60\": 0.1798, \n  \"iprec_at_recall_0.70\": 0.1421, \n  \"iprec_at_recall_0.80\": 0.0952, \n  \"iprec_at_recall_0.90\": 0.0654, \n  \"iprec_at_recall_1.00\": 0.0343, \n  \"map\": 0.2538, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 41.1124, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6815\n}\n'),(66,25,1,'2016-07-26 16:33:14','2016-07-26 16:36:10',0,'','{\n  \"P_10\": 0.458, \n  \"P_100\": 0.2088, \n  \"P_1000\": 0.0387, \n  \"P_15\": 0.428, \n  \"P_20\": 0.398, \n  \"P_200\": 0.14, \n  \"P_30\": 0.3373, \n  \"P_5\": 0.5, \n  \"P_500\": 0.0702, \n  \"Rprec\": 0.3364, \n  \"bpref\": 0.2996, \n  \"gm_map\": 0.3225, \n  \"iprec_at_recall_0.00\": 0.7702, \n  \"iprec_at_recall_0.10\": 0.6065, \n  \"iprec_at_recall_0.20\": 0.519, \n  \"iprec_at_recall_0.30\": 0.4293, \n  \"iprec_at_recall_0.40\": 0.3839, \n  \"iprec_at_recall_0.50\": 0.3269, \n  \"iprec_at_recall_0.60\": 0.2632, \n  \"iprec_at_recall_0.70\": 0.2025, \n  \"iprec_at_recall_0.80\": 0.1588, \n  \"iprec_at_recall_0.90\": 0.1147, \n  \"iprec_at_recall_1.00\": 0.0651, \n  \"map\": 0.3225, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 38.74, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.7244\n}\n'),(67,26,2,'2016-07-26 23:31:14','2016-07-26 23:34:18',0,'','{\n  \"P_10\": 0.4733, \n  \"P_100\": 0.3319, \n  \"P_1000\": 0.1156, \n  \"P_15\": 0.4622, \n  \"P_20\": 0.4513, \n  \"P_200\": 0.2665, \n  \"P_30\": 0.4249, \n  \"P_5\": 0.4947, \n  \"P_500\": 0.1744, \n  \"Rprec\": 0.2685, \n  \"bpref\": 0.2827, \n  \"gm_map\": 0.2025, \n  \"iprec_at_recall_0.00\": 0.7, \n  \"iprec_at_recall_0.10\": 0.4363, \n  \"iprec_at_recall_0.20\": 0.3617, \n  \"iprec_at_recall_0.30\": 0.2977, \n  \"iprec_at_recall_0.40\": 0.24, \n  \"iprec_at_recall_0.50\": 0.1847, \n  \"iprec_at_recall_0.60\": 0.1284, \n  \"iprec_at_recall_0.70\": 0.0757, \n  \"iprec_at_recall_0.80\": 0.0424, \n  \"iprec_at_recall_0.90\": 0.0116, \n  \"iprec_at_recall_1.00\": 0.0005, \n  \"map\": 0.2025, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 115.5667, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.6506\n}\n'),(68,26,3,'2016-07-26 23:31:14','2016-07-26 23:33:57',0,'','{\n  \"P_10\": 0.4064, \n  \"P_100\": 0.1687, \n  \"P_1000\": 0.038, \n  \"P_15\": 0.3665, \n  \"P_20\": 0.3351, \n  \"P_200\": 0.1135, \n  \"P_30\": 0.2914, \n  \"P_5\": 0.4578, \n  \"P_500\": 0.0631, \n  \"Rprec\": 0.2669, \n  \"bpref\": 0.2327, \n  \"gm_map\": 0.2217, \n  \"iprec_at_recall_0.00\": 0.686, \n  \"iprec_at_recall_0.10\": 0.4988, \n  \"iprec_at_recall_0.20\": 0.3943, \n  \"iprec_at_recall_0.30\": 0.3096, \n  \"iprec_at_recall_0.40\": 0.2405, \n  \"iprec_at_recall_0.50\": 0.196, \n  \"iprec_at_recall_0.60\": 0.1458, \n  \"iprec_at_recall_0.70\": 0.1012, \n  \"iprec_at_recall_0.80\": 0.0586, \n  \"iprec_at_recall_0.90\": 0.0327, \n  \"iprec_at_recall_1.00\": 0.0222, \n  \"map\": 0.2217, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 37.9598, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.641\n}\n'),(69,26,1,'2016-07-26 23:31:14','2016-07-26 23:34:10',0,'','{\n  \"P_10\": 0.408, \n  \"P_100\": 0.165, \n  \"P_1000\": 0.0309, \n  \"P_15\": 0.3827, \n  \"P_20\": 0.348, \n  \"P_200\": 0.1033, \n  \"P_30\": 0.2833, \n  \"P_5\": 0.42, \n  \"P_500\": 0.053, \n  \"Rprec\": 0.2823, \n  \"bpref\": 0.2369, \n  \"gm_map\": 0.2238, \n  \"iprec_at_recall_0.00\": 0.6993, \n  \"iprec_at_recall_0.10\": 0.5403, \n  \"iprec_at_recall_0.20\": 0.4092, \n  \"iprec_at_recall_0.30\": 0.3292, \n  \"iprec_at_recall_0.40\": 0.2812, \n  \"iprec_at_recall_0.50\": 0.2063, \n  \"iprec_at_recall_0.60\": 0.1352, \n  \"iprec_at_recall_0.70\": 0.0887, \n  \"iprec_at_recall_0.80\": 0.0438, \n  \"iprec_at_recall_0.90\": 0.0148, \n  \"iprec_at_recall_1.00\": 0.0056, \n  \"map\": 0.2238, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 30.9, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.6315\n}\n'),(70,27,2,'2016-07-26 23:35:13','2016-07-26 23:37:43',0,'','{\n  \"P_10\": 0.476, \n  \"P_100\": 0.3401, \n  \"P_1000\": 0.1204, \n  \"P_15\": 0.4644, \n  \"P_20\": 0.4507, \n  \"P_200\": 0.2735, \n  \"P_30\": 0.4307, \n  \"P_5\": 0.48, \n  \"P_500\": 0.1811, \n  \"Rprec\": 0.2779, \n  \"bpref\": 0.2956, \n  \"gm_map\": 0.2147, \n  \"iprec_at_recall_0.00\": 0.7126, \n  \"iprec_at_recall_0.10\": 0.4454, \n  \"iprec_at_recall_0.20\": 0.3673, \n  \"iprec_at_recall_0.30\": 0.306, \n  \"iprec_at_recall_0.40\": 0.249, \n  \"iprec_at_recall_0.50\": 0.1947, \n  \"iprec_at_recall_0.60\": 0.1475, \n  \"iprec_at_recall_0.70\": 0.1031, \n  \"iprec_at_recall_0.80\": 0.0691, \n  \"iprec_at_recall_0.90\": 0.0335, \n  \"iprec_at_recall_1.00\": 0.0043, \n  \"map\": 0.2147, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 120.3733, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.6597\n}\n'),(71,27,3,'2016-07-26 23:35:13','2016-07-26 23:37:51',0,'','{\n  \"P_10\": 0.4112, \n  \"P_100\": 0.1867, \n  \"P_1000\": 0.0413, \n  \"P_15\": 0.3794, \n  \"P_20\": 0.3526, \n  \"P_200\": 0.1267, \n  \"P_30\": 0.3062, \n  \"P_5\": 0.4578, \n  \"P_500\": 0.069, \n  \"Rprec\": 0.2908, \n  \"bpref\": 0.2562, \n  \"gm_map\": 0.2477, \n  \"iprec_at_recall_0.00\": 0.683, \n  \"iprec_at_recall_0.10\": 0.5033, \n  \"iprec_at_recall_0.20\": 0.4086, \n  \"iprec_at_recall_0.30\": 0.3409, \n  \"iprec_at_recall_0.40\": 0.2689, \n  \"iprec_at_recall_0.50\": 0.2294, \n  \"iprec_at_recall_0.60\": 0.18, \n  \"iprec_at_recall_0.70\": 0.1439, \n  \"iprec_at_recall_0.80\": 0.098, \n  \"iprec_at_recall_0.90\": 0.064, \n  \"iprec_at_recall_1.00\": 0.0373, \n  \"map\": 0.2477, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 41.3253, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6365\n}\n'),(72,27,1,'2016-07-26 23:35:13','2016-07-26 23:38:08',0,'','{\n  \"P_10\": 0.432, \n  \"P_100\": 0.1956, \n  \"P_1000\": 0.0371, \n  \"P_15\": 0.384, \n  \"P_20\": 0.358, \n  \"P_200\": 0.1332, \n  \"P_30\": 0.3027, \n  \"P_5\": 0.42, \n  \"P_500\": 0.0662, \n  \"Rprec\": 0.2988, \n  \"bpref\": 0.2672, \n  \"gm_map\": 0.2799, \n  \"iprec_at_recall_0.00\": 0.7002, \n  \"iprec_at_recall_0.10\": 0.5566, \n  \"iprec_at_recall_0.20\": 0.457, \n  \"iprec_at_recall_0.30\": 0.373, \n  \"iprec_at_recall_0.40\": 0.3285, \n  \"iprec_at_recall_0.50\": 0.2817, \n  \"iprec_at_recall_0.60\": 0.2232, \n  \"iprec_at_recall_0.70\": 0.1725, \n  \"iprec_at_recall_0.80\": 0.1358, \n  \"iprec_at_recall_0.90\": 0.0917, \n  \"iprec_at_recall_1.00\": 0.057, \n  \"map\": 0.2799, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 37.12, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.6376\n}\n'),(73,28,2,'2016-09-27 15:32:40','2016-09-27 15:33:40',0,'','{\n  \"P_10\": 0.492, \n  \"P_100\": 0.3431, \n  \"P_1000\": 0.1122, \n  \"P_15\": 0.476, \n  \"P_20\": 0.466, \n  \"P_200\": 0.2702, \n  \"P_30\": 0.4444, \n  \"P_5\": 0.5093, \n  \"P_500\": 0.1755, \n  \"Rprec\": 0.2697, \n  \"bpref\": 0.2787, \n  \"gm_map\": 0.2131, \n  \"iprec_at_recall_0.00\": 0.7265, \n  \"iprec_at_recall_0.10\": 0.4336, \n  \"iprec_at_recall_0.20\": 0.3563, \n  \"iprec_at_recall_0.30\": 0.2968, \n  \"iprec_at_recall_0.40\": 0.2468, \n  \"iprec_at_recall_0.50\": 0.1931, \n  \"iprec_at_recall_0.60\": 0.1443, \n  \"iprec_at_recall_0.70\": 0.1003, \n  \"iprec_at_recall_0.80\": 0.0723, \n  \"iprec_at_recall_0.90\": 0.0284, \n  \"iprec_at_recall_1.00\": 0.0053, \n  \"map\": 0.2131, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 112.1933, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.668\n}\n'),(74,28,3,'2016-09-27 15:32:44','2016-09-27 15:34:38',0,'','{\n  \"P_10\": 0.4325, \n  \"P_100\": 0.1809, \n  \"P_1000\": 0.0381, \n  \"P_15\": 0.3949, \n  \"P_20\": 0.3618, \n  \"P_200\": 0.1209, \n  \"P_30\": 0.3139, \n  \"P_5\": 0.4867, \n  \"P_500\": 0.0652, \n  \"Rprec\": 0.2896, \n  \"bpref\": 0.2558, \n  \"gm_map\": 0.2455, \n  \"iprec_at_recall_0.00\": 0.7237, \n  \"iprec_at_recall_0.10\": 0.5276, \n  \"iprec_at_recall_0.20\": 0.4161, \n  \"iprec_at_recall_0.30\": 0.3333, \n  \"iprec_at_recall_0.40\": 0.2663, \n  \"iprec_at_recall_0.50\": 0.2176, \n  \"iprec_at_recall_0.60\": 0.1664, \n  \"iprec_at_recall_0.70\": 0.1299, \n  \"iprec_at_recall_0.80\": 0.0819, \n  \"iprec_at_recall_0.90\": 0.0539, \n  \"iprec_at_recall_1.00\": 0.033, \n  \"map\": 0.2455, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 38.0562, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.6824\n}\n'),(75,28,1,'2016-09-27 15:32:49','2016-09-27 15:35:07',0,'','{\n  \"P_10\": 0.452, \n  \"P_100\": 0.192, \n  \"P_1000\": 0.0365, \n  \"P_15\": 0.4133, \n  \"P_20\": 0.387, \n  \"P_200\": 0.1297, \n  \"P_30\": 0.3313, \n  \"P_5\": 0.512, \n  \"P_500\": 0.0657, \n  \"Rprec\": 0.3214, \n  \"bpref\": 0.2884, \n  \"gm_map\": 0.3007, \n  \"iprec_at_recall_0.00\": 0.7335, \n  \"iprec_at_recall_0.10\": 0.5964, \n  \"iprec_at_recall_0.20\": 0.4861, \n  \"iprec_at_recall_0.30\": 0.4055, \n  \"iprec_at_recall_0.40\": 0.3486, \n  \"iprec_at_recall_0.50\": 0.3028, \n  \"iprec_at_recall_0.60\": 0.2252, \n  \"iprec_at_recall_0.70\": 0.1815, \n  \"iprec_at_recall_0.80\": 0.139, \n  \"iprec_at_recall_0.90\": 0.1045, \n  \"iprec_at_recall_1.00\": 0.0589, \n  \"map\": 0.3007, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 36.52, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.6842\n}\n'),(76,29,2,'2016-11-03 16:24:56','2016-11-03 16:28:40',0,'','{\n  \"P_10\": 0.504, \n  \"P_100\": 0.3646, \n  \"P_1000\": 0.124, \n  \"P_15\": 0.4973, \n  \"P_20\": 0.4807, \n  \"P_200\": 0.2875, \n  \"P_30\": 0.4598, \n  \"P_5\": 0.5187, \n  \"P_500\": 0.1901, \n  \"Rprec\": 0.2897, \n  \"bpref\": 0.3016, \n  \"gm_map\": 0.232, \n  \"iprec_at_recall_0.00\": 0.7327, \n  \"iprec_at_recall_0.10\": 0.4828, \n  \"iprec_at_recall_0.20\": 0.3871, \n  \"iprec_at_recall_0.30\": 0.328, \n  \"iprec_at_recall_0.40\": 0.2699, \n  \"iprec_at_recall_0.50\": 0.2138, \n  \"iprec_at_recall_0.60\": 0.1668, \n  \"iprec_at_recall_0.70\": 0.1107, \n  \"iprec_at_recall_0.80\": 0.0717, \n  \"iprec_at_recall_0.90\": 0.0284, \n  \"iprec_at_recall_1.00\": 0.0023, \n  \"map\": 0.232, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 124.0333, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.6907\n}\n'),(77,29,3,'2016-11-03 16:25:31','2016-11-03 16:27:08',0,'','{\n  \"P_10\": 0.4414, \n  \"P_100\": 0.1855, \n  \"P_1000\": 0.0386, \n  \"P_15\": 0.3973, \n  \"P_20\": 0.3681, \n  \"P_200\": 0.1238, \n  \"P_30\": 0.315, \n  \"P_5\": 0.498, \n  \"P_500\": 0.0662, \n  \"Rprec\": 0.2905, \n  \"bpref\": 0.2597, \n  \"gm_map\": 0.2503, \n  \"iprec_at_recall_0.00\": 0.7289, \n  \"iprec_at_recall_0.10\": 0.5271, \n  \"iprec_at_recall_0.20\": 0.4224, \n  \"iprec_at_recall_0.30\": 0.3428, \n  \"iprec_at_recall_0.40\": 0.2673, \n  \"iprec_at_recall_0.50\": 0.2222, \n  \"iprec_at_recall_0.60\": 0.1764, \n  \"iprec_at_recall_0.70\": 0.1354, \n  \"iprec_at_recall_0.80\": 0.0891, \n  \"iprec_at_recall_0.90\": 0.0574, \n  \"iprec_at_recall_1.00\": 0.0315, \n  \"map\": 0.2503, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 38.5502, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.692\n}\n'),(78,29,1,'2016-11-03 16:25:52','2016-11-03 16:27:14',0,'','{\n  \"P_10\": 0.476, \n  \"P_100\": 0.2014, \n  \"P_1000\": 0.0378, \n  \"P_15\": 0.436, \n  \"P_20\": 0.393, \n  \"P_200\": 0.1407, \n  \"P_30\": 0.3347, \n  \"P_5\": 0.532, \n  \"P_500\": 0.069, \n  \"Rprec\": 0.3417, \n  \"bpref\": 0.3034, \n  \"gm_map\": 0.3244, \n  \"iprec_at_recall_0.00\": 0.742, \n  \"iprec_at_recall_0.10\": 0.6262, \n  \"iprec_at_recall_0.20\": 0.5272, \n  \"iprec_at_recall_0.30\": 0.4336, \n  \"iprec_at_recall_0.40\": 0.3875, \n  \"iprec_at_recall_0.50\": 0.3207, \n  \"iprec_at_recall_0.60\": 0.2592, \n  \"iprec_at_recall_0.70\": 0.194, \n  \"iprec_at_recall_0.80\": 0.1511, \n  \"iprec_at_recall_0.90\": 0.1148, \n  \"iprec_at_recall_1.00\": 0.0591, \n  \"map\": 0.3244, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 37.78, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.6966\n}\n'),(79,30,3,'2016-11-04 01:47:28','2016-11-04 01:48:59',0,'','{\n  \"P_10\": 0.4414, \n  \"P_100\": 0.1855, \n  \"P_1000\": 0.0386, \n  \"P_15\": 0.3973, \n  \"P_20\": 0.3681, \n  \"P_200\": 0.1238, \n  \"P_30\": 0.315, \n  \"P_5\": 0.498, \n  \"P_500\": 0.0662, \n  \"Rprec\": 0.2905, \n  \"bpref\": 0.2597, \n  \"gm_map\": 0.2503, \n  \"iprec_at_recall_0.00\": 0.7289, \n  \"iprec_at_recall_0.10\": 0.5271, \n  \"iprec_at_recall_0.20\": 0.4224, \n  \"iprec_at_recall_0.30\": 0.3428, \n  \"iprec_at_recall_0.40\": 0.2673, \n  \"iprec_at_recall_0.50\": 0.2222, \n  \"iprec_at_recall_0.60\": 0.1764, \n  \"iprec_at_recall_0.70\": 0.1354, \n  \"iprec_at_recall_0.80\": 0.0891, \n  \"iprec_at_recall_0.90\": 0.0574, \n  \"iprec_at_recall_1.00\": 0.0315, \n  \"map\": 0.2503, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 38.5502, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.692\n}\n'),(80,31,0,'2016-12-19 19:56:32','2016-12-19 19:57:03',2,'usage: eval.py [-h] [-a ALL ALL ALL ALL] [-m REPLACE_AND_MAKE]\n               [-r RUN_QUERY RUN_QUERY]\neval.py: error: argument -a/--all: expected 4 argument(s)\n',''),(81,32,2,'2016-12-21 16:17:25','2016-12-21 16:20:08',0,'','{\n  \"P_10\": 0.0427, \n  \"P_100\": 0.0479, \n  \"P_1000\": 0.028, \n  \"P_15\": 0.0422, \n  \"P_20\": 0.0413, \n  \"P_200\": 0.0445, \n  \"P_30\": 0.046, \n  \"P_5\": 0.0387, \n  \"P_500\": 0.0364, \n  \"Rprec\": 0.0439, \n  \"bpref\": 0.0655, \n  \"gm_map\": 0.0256, \n  \"iprec_at_recall_0.00\": 0.0915, \n  \"iprec_at_recall_0.10\": 0.0542, \n  \"iprec_at_recall_0.20\": 0.0461, \n  \"iprec_at_recall_0.30\": 0.0356, \n  \"iprec_at_recall_0.40\": 0.0303, \n  \"iprec_at_recall_0.50\": 0.0239, \n  \"iprec_at_recall_0.60\": 0.0199, \n  \"iprec_at_recall_0.70\": 0.0116, \n  \"iprec_at_recall_0.80\": 0.0062, \n  \"iprec_at_recall_0.90\": 0.0046, \n  \"iprec_at_recall_1.00\": 0.0006, \n  \"map\": 0.0256, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 27.9867, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.069\n}\n'),(82,32,3,'2016-12-21 16:08:38','2016-12-21 16:11:22',0,'','{\n  \"P_10\": 0.0695, \n  \"P_100\": 0.037, \n  \"P_1000\": 0.015, \n  \"P_15\": 0.0648, \n  \"P_20\": 0.0608, \n  \"P_200\": 0.0289, \n  \"P_30\": 0.0558, \n  \"P_5\": 0.0699, \n  \"P_500\": 0.0205, \n  \"Rprec\": 0.0505, \n  \"bpref\": 0.0622, \n  \"gm_map\": 0.0367, \n  \"iprec_at_recall_0.00\": 0.1628, \n  \"iprec_at_recall_0.10\": 0.0783, \n  \"iprec_at_recall_0.20\": 0.058, \n  \"iprec_at_recall_0.30\": 0.0448, \n  \"iprec_at_recall_0.40\": 0.0365, \n  \"iprec_at_recall_0.50\": 0.0307, \n  \"iprec_at_recall_0.60\": 0.0258, \n  \"iprec_at_recall_0.70\": 0.0217, \n  \"iprec_at_recall_0.80\": 0.0143, \n  \"iprec_at_recall_0.90\": 0.0121, \n  \"iprec_at_recall_1.00\": 0.0078, \n  \"map\": 0.0367, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 14.988, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.1471\n}\n'),(83,32,1,'2016-12-21 16:08:38','2016-12-21 16:11:14',0,'','{\n  \"P_10\": 0.08, \n  \"P_100\": 0.0578, \n  \"P_1000\": 0.0186, \n  \"P_15\": 0.0853, \n  \"P_20\": 0.086, \n  \"P_200\": 0.0455, \n  \"P_30\": 0.0747, \n  \"P_5\": 0.064, \n  \"P_500\": 0.0286, \n  \"Rprec\": 0.0647, \n  \"bpref\": 0.0786, \n  \"gm_map\": 0.0517, \n  \"iprec_at_recall_0.00\": 0.1583, \n  \"iprec_at_recall_0.10\": 0.1184, \n  \"iprec_at_recall_0.20\": 0.0898, \n  \"iprec_at_recall_0.30\": 0.0801, \n  \"iprec_at_recall_0.40\": 0.0618, \n  \"iprec_at_recall_0.50\": 0.051, \n  \"iprec_at_recall_0.60\": 0.0373, \n  \"iprec_at_recall_0.70\": 0.0289, \n  \"iprec_at_recall_0.80\": 0.0156, \n  \"iprec_at_recall_0.90\": 0.0094, \n  \"iprec_at_recall_1.00\": 0.0006, \n  \"map\": 0.0517, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 18.64, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.1229\n}\n'),(84,33,1,'2016-12-21 16:49:59','2016-12-21 16:50:10',0,'','{\n  \"P_10\": 0.398, \n  \"P_100\": 0.1846, \n  \"P_1000\": 0.0353, \n  \"P_15\": 0.356, \n  \"P_20\": 0.319, \n  \"P_200\": 0.1237, \n  \"P_30\": 0.28, \n  \"P_5\": 0.42, \n  \"P_500\": 0.0638, \n  \"Rprec\": 0.273, \n  \"bpref\": 0.2425, \n  \"gm_map\": 0.2527, \n  \"iprec_at_recall_0.00\": 0.6661, \n  \"iprec_at_recall_0.10\": 0.5343, \n  \"iprec_at_recall_0.20\": 0.418, \n  \"iprec_at_recall_0.30\": 0.3409, \n  \"iprec_at_recall_0.40\": 0.2802, \n  \"iprec_at_recall_0.50\": 0.2459, \n  \"iprec_at_recall_0.60\": 0.1867, \n  \"iprec_at_recall_0.70\": 0.1459, \n  \"iprec_at_recall_0.80\": 0.1151, \n  \"iprec_at_recall_0.90\": 0.0797, \n  \"iprec_at_recall_1.00\": 0.0435, \n  \"map\": 0.2527, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 35.26, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.6141\n}\n'),(85,34,2,'2017-01-14 07:47:07','2017-01-14 07:50:23',0,'','{\n  \"P_10\": 0.0427, \n  \"P_100\": 0.0479, \n  \"P_1000\": 0.028, \n  \"P_15\": 0.0422, \n  \"P_20\": 0.0413, \n  \"P_200\": 0.0445, \n  \"P_30\": 0.046, \n  \"P_5\": 0.0387, \n  \"P_500\": 0.0364, \n  \"Rprec\": 0.0439, \n  \"bpref\": 0.0655, \n  \"gm_map\": 0.0256, \n  \"iprec_at_recall_0.00\": 0.0915, \n  \"iprec_at_recall_0.10\": 0.0542, \n  \"iprec_at_recall_0.20\": 0.0461, \n  \"iprec_at_recall_0.30\": 0.0356, \n  \"iprec_at_recall_0.40\": 0.0303, \n  \"iprec_at_recall_0.50\": 0.0239, \n  \"iprec_at_recall_0.60\": 0.0199, \n  \"iprec_at_recall_0.70\": 0.0116, \n  \"iprec_at_recall_0.80\": 0.0062, \n  \"iprec_at_recall_0.90\": 0.0046, \n  \"iprec_at_recall_1.00\": 0.0006, \n  \"map\": 0.0256, \n  \"num_q\": 1.0, \n  \"num_rel\": 252.24, \n  \"num_rel_ret\": 27.9867, \n  \"num_ret\": 989.4933, \n  \"recip_rank\": 0.069\n}\n'),(86,34,3,'2017-01-14 07:47:07','2017-01-14 07:50:05',0,'','{\n  \"P_10\": 0.0695, \n  \"P_100\": 0.037, \n  \"P_1000\": 0.015, \n  \"P_15\": 0.0648, \n  \"P_20\": 0.0608, \n  \"P_200\": 0.0289, \n  \"P_30\": 0.0558, \n  \"P_5\": 0.0699, \n  \"P_500\": 0.0205, \n  \"Rprec\": 0.0505, \n  \"bpref\": 0.0622, \n  \"gm_map\": 0.0367, \n  \"iprec_at_recall_0.00\": 0.1628, \n  \"iprec_at_recall_0.10\": 0.0783, \n  \"iprec_at_recall_0.20\": 0.058, \n  \"iprec_at_recall_0.30\": 0.0448, \n  \"iprec_at_recall_0.40\": 0.0365, \n  \"iprec_at_recall_0.50\": 0.0307, \n  \"iprec_at_recall_0.60\": 0.0258, \n  \"iprec_at_recall_0.70\": 0.0217, \n  \"iprec_at_recall_0.80\": 0.0143, \n  \"iprec_at_recall_0.90\": 0.0121, \n  \"iprec_at_recall_1.00\": 0.0078, \n  \"map\": 0.0367, \n  \"num_q\": 1.0, \n  \"num_rel\": 69.9277, \n  \"num_rel_ret\": 14.988, \n  \"num_ret\": 969.2851, \n  \"recip_rank\": 0.1471\n}\n'),(87,34,1,'2017-01-14 07:47:07','2017-01-14 07:50:12',0,'','{\n  \"P_10\": 0.08, \n  \"P_100\": 0.0578, \n  \"P_1000\": 0.0186, \n  \"P_15\": 0.0853, \n  \"P_20\": 0.086, \n  \"P_200\": 0.0455, \n  \"P_30\": 0.0747, \n  \"P_5\": 0.064, \n  \"P_500\": 0.0286, \n  \"Rprec\": 0.0647, \n  \"bpref\": 0.0786, \n  \"gm_map\": 0.0517, \n  \"iprec_at_recall_0.00\": 0.1583, \n  \"iprec_at_recall_0.10\": 0.1184, \n  \"iprec_at_recall_0.20\": 0.0898, \n  \"iprec_at_recall_0.30\": 0.0801, \n  \"iprec_at_recall_0.40\": 0.0618, \n  \"iprec_at_recall_0.50\": 0.051, \n  \"iprec_at_recall_0.60\": 0.0373, \n  \"iprec_at_recall_0.70\": 0.0289, \n  \"iprec_at_recall_0.80\": 0.0156, \n  \"iprec_at_recall_0.90\": 0.0094, \n  \"iprec_at_recall_1.00\": 0.0006, \n  \"map\": 0.0517, \n  \"num_q\": 1.0, \n  \"num_rel\": 45.58, \n  \"num_rel_ret\": 18.64, \n  \"num_ret\": 977.7, \n  \"recip_rank\": 0.1229\n}\n');
/*!40000 ALTER TABLE `evaluation` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `index_paths`
--

DROP TABLE IF EXISTS `index_paths`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `index_paths` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `uid` bigint(20) NOT NULL COMMENT 'the uid that added the index',
  `iname` varchar(255) NOT NULL COMMENT 'index name',
  `path` varchar(255) NOT NULL COMMENT 'index path',
  `add_dt` datetime NOT NULL,
  `notes` mediumtext,
  `stats` varchar(500) NOT NULL COMMENT 'statistics about the collection',
  PRIMARY KEY (`id`),
  KEY `UIDFK` (`uid`),
  CONSTRAINT `index_paths_ibfk_1` FOREIGN KEY (`uid`) REFERENCES `users` (`uid`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `index_paths`
--

LOCK TABLES `index_paths` WRITE;
/*!40000 ALTER TABLE `index_paths` DISABLE KEYS */;
INSERT INTO `index_paths` VALUES (2,3,'disk12','disk12','2016-04-19 19:17:04','disk12 is for TREC1,2,3','{\r\n    \"documents\": 741856,\r\n    \"unique terms\": 643017,\r\n    \"total terms\": 306306879,\r\n    \"average doc length\": 412.893\r\n}'),(4,3,'disk45','disk45','2016-04-18 21:55:55','disk45 is for queries TREC6,7,8 and ROBUST04.','{\n    \"documents\": 528155,\n    \"unique terms\": 439532,\n    \"total terms\": 246940676,\n    \"average doc length\": 467.553\n}'),(5,3,'wt2g','wt2g','2016-04-18 21:51:34','','{\n    \"documents\": 247491,\n    \"unique terms\": 1341890,\n    \"total terms\": 261397310,\n    \"average doc length\": 1056.19\n}');
/*!40000 ALTER TABLE `index_paths` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `info`
--

DROP TABLE IF EXISTS `info`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `info` (
  `name` varchar(255) NOT NULL,
  `content` text NOT NULL,
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `info`
--

LOCK TABLES `info` WRITE;
/*!40000 ALTER TABLE `info` DISABLE KEYS */;
INSERT INTO `info` VALUES ('code_instruction','Intro\r\n-----\r\nThe Reproducible Information retrieval System Evaluation (**RISE**) is a web based service that enables the users to type and submit their own ranking models, get the models automatically evaluated. \r\n\r\nRISE mainly depends on Indri toolkit. This means that the users should be familiar with C++ (C98 Standard). Knowing about Indri is a big plus. **_However we have modified the Indri code so you\'d better read this instruction thoroughly in order to learn how to add new ranking models._** If you are not familiar with either of them please go to the following website to at least get the general idea.\r\n\r\n[Indri Toolkit](http://www.lemurproject.org/indri.php)\r\n\r\n[C++ Reference](http://www.cplusplus.com/)\r\n\r\nThe Rationale\r\n-----\r\n\r\nThe general ranking process of RISE is like the following:\r\n\r\n1. For each query term, go to its inverted index and collect the collection-wise statistics about the term.\r\n2. Run the constructor of the ranking model (you can effectively insert some _pre-computing code_ into the constructor of your ranking model to get things done faster). \r\n3. Go through every document in the inverted list and compute the document score for this query term.\r\n4. For each document, add the scores of all query terms as: $\\sum_{q \\in Q}qtf\\cdot f(q)$\r\n\r\nThe Sample Code\r\n-----\r\n\r\nHere we explain how to add new ranking model by inspecting the sample code.\r\nThe sample code implements the Dirichlet Language Model.\r\n\r\nWe first look at the HPP file of the code file. Please note that you cannot modify this file. There are several private variables. They are either collection-wide statistics or the query statistics:\r\n- __collectionOccurence_: total count of the term in the collection\r\n- __collectionSize_: total terms in the collection\r\n- __documentOccurrences_: number of documents in which the term occurs\r\n- __documentCount_: total number of documents in the collection\r\n- __queryLength_: number of terms in the query\r\n\r\nYou can directly access these statistics in your ranking models. \r\nHowever, if you would like to use any additional variables you have to declare them as the \r\nkey-value pairs in the private variable __modelParas_.\r\n\r\nYou will see in the CPP File that there are several additional variables in __modelParas_: \r\n\r\n_mu_, _collectionFrequency_ and __muTimesCollectionFrequency_. \r\n\r\nYou can also put some computations that are documents independent  in the __preCompute()_ function. This will speed up the computation and also keep your code\'s logic cleaner. \r\n\r\n**HPP File**\r\n```\r\n#include <string>\r\n#include <map>\r\n\r\nnamespace indri\r\n{\r\n  namespace query\r\n  {\r\n    class TermScoreFunction {\r\n    private:\r\n      double _collectionOccurence;\r\n      double _collectionSize;\r\n      double _documentOccurrences;\r\n      double _documentCount;\r\n      double _queryLength;\r\n      std::map<std::string, double> _modelParas;\r\n\r\n      void _preCompute();\r\n    public:\r\n      TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras );\r\n      double scoreOccurrence( double occurrences, int contextLength, double qtf, double docUniqueTerms );\r\n    };\r\n  }\r\n}\r\n```\r\n\r\nFor the CPP File, the most important function is _scoreOccurrence_. It computes the score of \r\nthe current document for the current query term. Please note that the arguments of this function \r\nis different from Indri\'s implementation:\r\n- occurrences: term frequency of the document (tf)\r\n- contextSize: document length\r\n- qtf: query term frequency (_**note that each unique query term will be judged only once and you should take care of the qtf by yourself!**_)\r\n- docUniqueTerms: number of unique terms in the documents\r\n\r\nYou can use the variables defined in _modelParas to facilitate the computation. For example, in the sample code _modelParas[\"_muTimesCollectionFrequency\"] is used to compute the document score. As mentioned before, \r\nyou need to take care of the qtf, that is why we multiply qtf to the score. Here the returned value of scoreOccurrence function is the score of current query term. Scores of all query terms will be added together to generate the final score of the document.\r\n\r\n\r\n**CPP File**\r\n```\r\n#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\n/*\r\n* Put anything that is computational expensive and can be pre-computed here\r\n*/\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"mu\"] = 2500;\r\n  _modelParas[\"collectionFrequency\"] = _collectionOccurence ? (_collectionOccurence/_collectionSize) : (1.0 / _collectionSize*2.);\r\n  _modelParas[\"_muTimesCollectionFrequency\"] = _modelParas[\"mu\"] * _modelParas[\"collectionFrequency\"];\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();  \r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double occurrences, int contextSize, double qtf, double docUniqueTerms ) {\r\n  double seen = ( double(occurrences) + _modelParas[\"_muTimesCollectionFrequency\"] ) / ( double(contextSize) + _modelParas[\"mu\"] );\r\n  return qtf * log( seen );\r\n}\r\n```');
/*!40000 ALTER TABLE `info` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `models`
--

DROP TABLE IF EXISTS `models`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `models` (
  `mid` bigint(20) NOT NULL AUTO_INCREMENT,
  `uid` bigint(12) NOT NULL,
  `mname` varchar(255) NOT NULL,
  `mpara` varchar(255) NOT NULL,
  `mnotes` text NOT NULL,
  `mbody` text NOT NULL,
  `submitted_dt` datetime NOT NULL,
  `last_modified_dt` datetime NOT NULL,
  `last_compile_dt` datetime NOT NULL,
  `compile_status` tinyint(4) NOT NULL DEFAULT '-1',
  `compile_msg` mediumtext NOT NULL,
  PRIMARY KEY (`mid`),
  KEY `uid` (`uid`),
  CONSTRAINT `models_ibfk_1` FOREIGN KEY (`uid`) REFERENCES `users` (`uid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=35 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `models`
--

LOCK TABLES `models` WRITE;
/*!40000 ALTER TABLE `models` DISABLE KEYS */;
INSERT INTO `models` VALUES (1,3,'Error Evaluation Test','','','#include \"indri/TermScoreFunction.hpp\"\r\n#include <iostream>\r\n\r\nusing namespace std;\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double occurrences, int contextSize, double qtf, double docUniqueTerms ) {\r\n  std::cout << \"asdf\" << endl;\r\n  return qtf;\r\n}','2016-03-03 02:50:48','2016-04-19 18:51:42','2016-04-19 18:52:10',0,''),(3,3,'Term Frequency','','this is the formal test','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double occurrences, int contextSize, double qtf, double docUniqueTerms ) {\r\n  return qtf * occurrences;\r\n}','2016-03-03 18:58:01','2016-04-19 18:49:49','2016-04-19 18:51:05',0,''),(6,5,'Dirichlet Language Model','mu=2500','C. Zhai and J. Lafferty. A study of smoothing methods for language models applied to information retrieval. ACM Trans. Inf. Syst., 22(2):179–214, Apr. 2004.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _modelParas[\"mu\"] = 2500;\r\n  _modelParas[\"collectionFrequency\"] = _collectionOccurence ? (_collectionOccurence/_collectionSize) : (1.0 / _collectionSize*2.);\r\n  _modelParas[\"_muTimesCollectionFrequency\"] = _modelParas[\"mu\"] * _modelParas[\"collectionFrequency\"];\r\n  //_preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double occurrences, int contextSize, double qtf, double docUniqueTerms ) {\r\n  double seen = ( double(occurrences) + _modelParas[\"_muTimesCollectionFrequency\"] ) / ( double(contextSize) + _modelParas[\"mu\"] );\r\n  return qtf * log( seen );\r\n}','2016-04-16 21:33:13','2016-07-18 13:44:45','2016-07-18 13:45:13',0,''),(7,3,'Error Model','','This is for compile error test','asdf','2016-04-19 21:31:48','2016-04-19 21:31:48','2016-04-19 21:32:03',1,'../src/TermScoreFunction.cpp:1:1: error: \'asdf\' does not name a type\n asdf\n ^\nmake[1]: *** [TermScoreFunction.o] Error 1\nmake: *** [all] Error 2\n\n'),(8,5,'BM25','b=0.25','S. Robertson, S. Walker, S. Jones, M. Hancock-Beaulieu, and M. Gatford. Okapi at trec-3. pages 109–126, 1996.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"b\"] = 0.25;\r\n  _modelParas[\"k1\"] = 1.2;\r\n  _modelParas[\"k3\"] = 1000;\r\n  _modelParas[\"idf\"] = log( ( _documentCount - _documentOccurrences + 0.5 ) / ( _documentOccurrences + 0.5 ) );\r\n  _modelParas[\"avgDocLength\"] = _collectionSize / double(_documentCount);\r\n  _modelParas[\"_idfTimesK1PlusOne\"] = _modelParas[\"idf\"] * ( _modelParas[\"k1\"] + 1 );\r\n  _modelParas[\"_k1TimesOneMinusB\"] = _modelParas[\"k1\"] * (1-_modelParas[\"b\"]);\r\n  _modelParas[\"_bOverAvgDocLength\"] = _modelParas[\"b\"] / _modelParas[\"avgDocLength\"];\r\n  _modelParas[\"_k1TimesBOverAvgDocLength\"] = _modelParas[\"k1\"] * _modelParas[\"_bOverAvgDocLength\"];\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double occurrences, int contextSize, double qtf, double docUniqueTerms ) {\r\n    double norm_qtf = (_modelParas[\"k3\"] + 1) * qtf / (_modelParas[\"k3\"] + qtf);\r\n    double numerator = norm_qtf * occurrences * _modelParas[\"_idfTimesK1PlusOne\"];\r\n    double denominator = occurrences + _modelParas[\"_k1TimesOneMinusB\"] + _modelParas[\"_k1TimesBOverAvgDocLength\"] * contextSize;\r\n    return numerator / denominator;\r\n}','2016-06-06 14:03:12','2016-07-18 13:45:54','2016-07-18 13:46:07',0,''),(9,5,'Pivoted Document Length Normalization','s=0.05','A. Singhal, C. Buckley, and M. Mitra. Pivoted document length normalization. In Proceedings of the 19th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR ’96, pages 21–29, New York, NY, USA, 1996. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"s\"] = 0.05;\r\n  _modelParas[\"idf\"] = log( ( _documentCount + 1 ) / ( _documentOccurrences + 0.5 ) );\r\n  _modelParas[\"avgDocLength\"] = _collectionSize / double(_documentCount);\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double occurrences, int contextSize, double qtf, double docUniqueTerms ) {\r\n  if (occurrences - 0.0 < 1e-6) return 0;\r\n  double score = _modelParas[\"idf\"] * ( 1+log(1+log(occurrences)) ) / ( 1-_modelParas[\"s\"]+_modelParas[\"s\"]*contextSize/_modelParas[\"avgDocLength\"] );\r\n  return qtf * score;\r\n}','2016-07-18 01:53:47','2016-07-18 02:33:04','2016-07-18 02:34:06',0,''),(10,5,'F2EXP','s=0.05, k=0.35','H. Fang and C. Zhai. An exploration of axiomatic approaches to information retrieval. In Proceedings of the 28th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR ’05, pages 480–487, New York, NY, USA, 2005. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"s\"] = 0.05;\r\n  _modelParas[\"idf\"] = pow( ( _documentCount + 1 ) / ( _documentOccurrences + 0.5 ), 0.35 );\r\n  _modelParas[\"avgDocLength\"] = _collectionSize / double(_documentCount);\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double occurrences, int contextSize, double qtf, double docUniqueTerms ) {\r\n  if (occurrences - 0.0 < 1e-6) return 0;\r\n  double score = _modelParas[\"idf\"] * occurrences / ( occurrences+_modelParas[\"s\"]+_modelParas[\"s\"]*contextSize/_modelParas[\"avgDocLength\"] );\r\n  return qtf * score;\r\n}','2016-07-18 02:46:56','2016-07-18 03:06:29','2016-07-18 03:07:06',0,''),(11,5,'F2LOG','s=0.05, k=0.35','H. Fang and C. Zhai. An exploration of axiomatic approaches to information retrieval. In Proceedings of the 28th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR ’05, pages 480–487, New York, NY, USA, 2005. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"s\"] = 0.05;\r\n  _modelParas[\"idf\"] = log( ( _documentCount + 1 ) / ( _documentOccurrences + 0.5 ) );\r\n  _modelParas[\"avgDocLength\"] = _collectionSize / double(_documentCount);\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double occurrences, int contextSize, double qtf, double docUniqueTerms ) {\r\n  if (occurrences - 0.0 < 1e-6) return 0;\r\n  double score = _modelParas[\"idf\"] * occurrences / ( occurrences+_modelParas[\"s\"]+_modelParas[\"s\"]*contextSize/_modelParas[\"avgDocLength\"] );\r\n  return qtf * score;\r\n}','2016-07-18 13:55:31','2016-07-18 13:55:31','2016-07-18 13:56:06',0,''),(12,5,'BM3','mu=2500','B. He and I. Ounis. A study of the dirichlet priors for term frequency normalisation. In Proceedings of the 28th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR ’05, pages 465–471, New York, NY, USA, 2005. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"mu\"] = 2500;\r\n  _modelParas[\"k1\"] = 1.2;\r\n  _modelParas[\"k3\"] = 1000;\r\n  _modelParas[\"idf\"] = log( ( _documentCount - _documentOccurrences + 0.5 ) / ( _documentOccurrences + 0.5 ) );\r\n  _modelParas[\"_idfTimesK1PlusOne\"] = _modelParas[\"idf\"] * ( _modelParas[\"k1\"] + 1 );\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();\r\n}\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n    double norm_qtf = (_modelParas[\"k3\"] + 1) * qtf / (_modelParas[\"k3\"] + qtf);\r\n    double tfn = (tf+_modelParas[\"mu\"]*_collectionOccurence/_collectionSize)*_modelParas[\"mu\"]/(dl+_modelParas[\"mu\"]);\r\n    double numerator = norm_qtf * tfn * _modelParas[\"_idfTimesK1PlusOne\"];\r\n    double denominator = tfn + _modelParas[\"k1\"];\r\n    return numerator / denominator;\r\n}','2016-07-18 14:15:19','2016-07-20 14:29:28','2016-07-20 14:30:39',0,''),(13,5,'BM25+','b=0.3, delta=1.0','Y. Lv and C. Zhai. Lower-bounding term frequencynormalization. InProceedings of the 20th ACMInternational Conference on Information andKnowledge Management, CIKM ’11, pages 7–16, NewYork, NY, USA, 2011. ACM','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"b\"] = 0.3;\r\n  _modelParas[\"delta\"] = 1.0;\r\n  _modelParas[\"k1\"] = 1.2;\r\n  _modelParas[\"k3\"] = 1000;\r\n  _modelParas[\"idf\"] = log( ( _documentCount + 1 ) / ( _documentOccurrences + 0.5 ) );\r\n  _modelParas[\"avgDocLength\"] = _collectionSize / double(_documentCount);\r\n  _modelParas[\"_idfTimesDelta\"] = _modelParas[\"idf\"] * _modelParas[\"delta\"];\r\n  _modelParas[\"_idfTimesK1PlusOne\"] = _modelParas[\"idf\"] * ( _modelParas[\"k1\"] + 1 );\r\n  _modelParas[\"_k1TimesOneMinusB\"] = _modelParas[\"k1\"] * (1-_modelParas[\"b\"]);\r\n  _modelParas[\"_bOverAvgDocLength\"] = _modelParas[\"b\"] / _modelParas[\"avgDocLength\"];\r\n  _modelParas[\"_k1TimesBOverAvgDocLength\"] = _modelParas[\"k1\"] * _modelParas[\"_bOverAvgDocLength\"];\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double occurrences, int contextSize, double qtf, double docUniqueTerms ) {\r\n    double norm_qtf = (_modelParas[\"k3\"] + 1) * qtf / (_modelParas[\"k3\"] + qtf);\r\n    double numerator = norm_qtf * (occurrences * _modelParas[\"_idfTimesK1PlusOne\"] + _modelParas[\"_idfTimesDelta\"]);\r\n    double denominator = occurrences + _modelParas[\"_k1TimesOneMinusB\"] + _modelParas[\"_k1TimesBOverAvgDocLength\"] * contextSize;\r\n    return numerator / denominator;\r\n}','2016-07-22 01:24:46','2016-07-22 01:24:46','2016-07-22 01:25:17',0,''),(14,5,'F1EXP','s=0.05','H. Fang and C. Zhai. An exploration of axiomatic approaches to information retrieval. InProceedings of the 28th Annual International ACM SIGIRConference on Research and Development inInformation Retrieval, SIGIR ’05, pages 480–487, NewYork, NY, USA, 2005. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"s\"] = 0.05;\r\n  _modelParas[\"idf\"] = pow( ( _documentCount + 1 ) / ( _documentOccurrences + 0.5 ), 0.35 );\r\n  _modelParas[\"avgDocLength\"] = _collectionSize / double(_documentCount);\r\n  _modelParas[\"avgDocLengthPlusS\"] = _modelParas[\"avgDocLength\"] + _modelParas[\"s\"];\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double occurrences, int contextSize, double qtf, double docUniqueTerms ) {\r\n  if (occurrences - 0.0 < 1e-6) return 0;\r\n  double score = _modelParas[\"idf\"] * ( 1+log(1+log(occurrences)) ) * _modelParas[\"avgDocLengthPlusS\"] / ( _modelParas[\"s\"]*contextSize + _modelParas[\"avgDocLength\"] );\r\n  return qtf * score;\r\n}','2016-07-22 01:35:25','2016-07-22 01:35:25','2016-07-22 01:36:09',0,''),(15,5,'F1LOG','s=0.05','H. Fang and C. Zhai. An exploration of axiomatic approaches to information retrieval. InProceedings of the 28th Annual International ACM SIGIRConference on Research and Development inInformation Retrieval, SIGIR ’05, pages 480–487, NewYork, NY, USA, 2005. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"s\"] = 0.05;\r\n  _modelParas[\"idf\"] = log( ( _documentCount + 1 ) / ( _documentOccurrences + 0.5 ) );\r\n  _modelParas[\"avgDocLength\"] = _collectionSize / double(_documentCount);\r\n  _modelParas[\"avgDocLengthPlusS\"] = _modelParas[\"avgDocLength\"] + _modelParas[\"s\"];\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double occurrences, int contextSize, double qtf, double docUniqueTerms ) {\r\n  if (occurrences - 0.0 < 1e-6) return 0;\r\n  double score = _modelParas[\"idf\"] * ( 1+log(1+log(occurrences)) ) * _modelParas[\"avgDocLengthPlusS\"] / ( _modelParas[\"s\"]*contextSize + _modelParas[\"avgDocLength\"] );\r\n  return qtf * score;\r\n}','2016-07-22 01:39:32','2016-07-22 01:39:32','2016-07-22 01:40:10',0,''),(16,5,'PIV+','s=0.05, delta=1.0','Y. Lv and C. Zhai. Lower-bounding term frequency normalization. InProceedings of the 20th ACMInternational Conference on Information andKnowledge Management, CIKM ’11, pages 7–16, NewYork, NY, USA, 2011. ACM\r\n','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"s\"] = 0.05;\r\n  _modelParas[\"delta\"] = 1.0;\r\n  _modelParas[\"idf\"] = log( ( _documentCount + 1 ) / ( _documentOccurrences + 0.5 ) );\r\n  _modelParas[\"avgDocLength\"] = _collectionSize / double(_documentCount);\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double occurrences, int contextSize, double qtf, double docUniqueTerms ) {\r\n  if (occurrences - 0.0 < 1e-6) return 0;\r\n  double dynamic = ( 1+log(1+log(occurrences)) ) / ( 1-_modelParas[\"s\"]+_modelParas[\"s\"]*contextSize/_modelParas[\"avgDocLength\"] );\r\n  double score = _modelParas[\"idf\"] * (dynamic + _modelParas[\"delta\"]);\r\n  return qtf * score;\r\n}','2016-07-22 01:44:33','2016-07-22 01:44:33','2016-07-22 01:45:06',0,''),(17,5,'NTFIDF','','J. H. Paik. A novel tf-idf weighting scheme for effective ranking. InProceedings of the 36th International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR ’13,pages 343–352, New York, NY, USA, 2013. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"idf\"] = log( ( _documentCount + 1 ) / ( _documentOccurrences + 0.1 ) );\r\n  _modelParas[\"avgDocLength\"] = _collectionSize / double(_documentCount);\r\n  _modelParas[\"omega\"] = 2.0 / (1 + log(1 + _modelParas[\"qLen\"]) / log(2.0));\r\n  _modelParas[\"cf\"] = _collectionOccurence / _documentOccurrences;\r\n  _modelParas[\"idfAndCf\"] = _modelParas[\"idf\"] * (_modelParas[\"cf\"] / (1 + _modelParas[\"cf\"]));\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _modelParas[\"qLen\"] = queryLength;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n  double tfNorm = tf / (dl / docUniqueTerms);\r\n  double tfNormF = _modelParas[\"omega\"] * tfNorm / (1+tfNorm);\r\n  double dlNorm = tf * log(1+_modelParas[\"avgDocLength\"]/dl) / log(2.0);\r\n  double dlNormF = (1 - _modelParas[\"omega\"]) * dlNorm / (1+dlNorm);\r\n  double score = tfNormF * dlNormF * _modelParas[\"idfAndCf\"];\r\n  return qtf * score;\r\n}','2016-07-22 02:38:31','2016-07-22 02:39:58','2016-07-22 02:40:06',0,''),(18,5,'Two Stage Language Model','mu=2500','C. Zhai and J. Lafferty. Two-stage language models for information retrieval. InProceedings of the 25th Annual International ACM SIGIR Conference onResearch and Development in Information Retrieval,SIGIR ’02, pages 49–56, New York, NY, USA, 2002.ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"mu\"] = 2500;\r\n  _modelParas[\"lambda\"] = 0.5;\r\n  _modelParas[\"oneMinusLambda\"] = 1 - _modelParas[\"lambda\"];\r\n  _modelParas[\"collectionFrequency\"] = _collectionOccurence ? (_collectionOccurence/_collectionSize) : (1.0 / _collectionSize*2.);\r\n  _modelParas[\"_muTimesCollectionFrequency\"] = _modelParas[\"mu\"] * _modelParas[\"collectionFrequency\"]; \r\n  _modelParas[\"lambdaTimesCollectionFrequency\"] = _modelParas[\"lambda\"] * _modelParas[\"collectionFrequency\"];\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n  double seen = ( double(tf) + _modelParas[\"_muTimesCollectionFrequency\"] ) / ( double(dl) + _modelParas[\"mu\"] );\r\n  return qtf * ( _modelParas[\"oneMinusLambda\"] * log( seen ) + _modelParas[\"lambdaTimesCollectionFrequency\"]);\r\n}','2016-07-26 02:19:40','2016-07-26 02:49:52','2016-07-26 02:50:06',0,''),(19,5,'Bernoulli Language Model','mu=2500','D. Metzler, V. Lavrenko, and W. B. Croft. Formalmultiple-bernoulli models for language modeling. InProceedings of the 27th Annual International ACM SIGIR Conference on Research and Development inInformation Retrieval, SIGIR ’04, pages 540–541, NewYork, NY, USA, 2004. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"mu\"] = 2500;\r\n  _modelParas[\"collectionFrequency\"] = _collectionOccurence ? (_collectionOccurence/_collectionSize) : (1.0 / _collectionSize*2.);\r\n  _modelParas[\"reverseCollectionFrequency\"] = 1.0 / _modelParas[\"collectionFrequency\"] + _modelParas[\"mu\"] - 2;\r\n  _modelParas[\"_muTimesCollectionFrequency\"] = _modelParas[\"mu\"] * _modelParas[\"collectionFrequency\"];\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n  double seen = ( double(tf) + _modelParas[\"_muTimesCollectionFrequency\"] ) / ( double(dl) + _modelParas[\"reverseCollectionFrequency\"] );\r\n  return qtf * seen;\r\n}','2016-07-26 02:54:38','2016-07-26 02:55:32','2016-07-26 02:56:06',0,''),(20,5,'F3EXP','s=0.05','H. Fang and C. Zhai. An exploration of axiomatic approaches to information retrieval. InProceedings of the 28th Annual International ACM SIGIRConference on Research and Development inInformation Retrieval, SIGIR ’05, pages 480–487, NewYork, NY, USA, 2005. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"s\"] = 0.05;\r\n  _modelParas[\"idf\"] = pow( ( _documentCount + 1 ) / ( _documentOccurrences + 0.5 ), 0.35 );\r\n  _modelParas[\"avgDocLength\"] = _collectionSize / double(_documentCount);\r\n  _modelParas[\"normAvgDocLen\"] = _modelParas[\"qLen\"] * _modelParas[\"s\"] / _modelParas[\"avgDocLength\"];\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _modelParas[\"qLen\"] = queryLength;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n  if (tf - 0.0 < 1e-6) return 0;\r\n  double score = _modelParas[\"idf\"] * ( 1+log(1+log(tf)) ) - _modelParas[\"normAvgDocLen\"] * ( dl - _modelParas[\"qLen\"] );\r\n  return qtf * score;\r\n}','2016-07-26 03:03:05','2016-07-26 03:05:54','2016-07-26 03:06:06',0,''),(21,5,'F3LOG','s=0.05','H. Fang and C. Zhai. An exploration of axiomatic approaches to information retrieval. InProceedings of the 28th Annual International ACM SIGIRConference on Research and Development inInformation Retrieval, SIGIR ’05, pages 480–487, NewYork, NY, USA, 2005. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"s\"] = 0.05;\r\n  _modelParas[\"idf\"] = log( ( _documentCount + 1 ) / ( _documentOccurrences + 0.5 ) );\r\n  _modelParas[\"avgDocLength\"] = _collectionSize / double(_documentCount);\r\n  _modelParas[\"normAvgDocLen\"] = _modelParas[\"qLen\"] * _modelParas[\"s\"] / _modelParas[\"avgDocLength\"];\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _modelParas[\"qLen\"] = queryLength;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n  if (tf - 0.0 < 1e-6) return 0;\r\n  double score = _modelParas[\"idf\"] * ( 1+log(1+log(tf)) ) - _modelParas[\"normAvgDocLen\"] * ( dl - _modelParas[\"qLen\"] );\r\n  return qtf * score;\r\n}','2016-07-26 03:08:26','2016-07-26 03:08:26','2016-07-26 03:09:08',0,''),(22,5,'DIR+','mu=2500,delta=0.05','Y. Lv and C. Zhai. Lower-bounding term frequency normalization. InProceedings of the 20th ACMInternational Conference on Information andKnowledge Management, CIKM ’11, pages 7–16, NewYork, NY, USA, 2011. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"mu\"] = 2500;\r\n  _modelParas[\"delta\"] = 0.05;\r\n  _modelParas[\"collectionFrequency\"] = _collectionOccurence ? (_collectionOccurence/_collectionSize) : (1.0 / _collectionSize*2.);\r\n  _modelParas[\"deltaPart\"] = log( 1 + _modelParas[\"delta\"] / _modelParas[\"collectionFrequency\"] );\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _modelParas[\"qLen\"] = queryLength;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n  double score = log( 1 + double(tf) / _modelParas[\"collectionFrequency\"] ) + _modelParas[\"deltaPart\"] + _modelParas[\"qLen\"] * log(_modelParas[\"mu\"]/(_modelParas[\"mu\"]+dl));\r\n  return qtf * score;\r\n}','2016-07-26 03:33:17','2016-07-26 03:33:17','2016-07-26 03:34:06',0,''),(23,5,'PL2','c=7.0','G. Amati and C. J. Van Rijsbergen. Probabilistic models of information retrieval based on measuring the divergence from randomness.ACM Trans. Inf.Syst., 20(4):357–389, 2002.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"c\"] = 7.0;\r\n  _modelParas[\"e\"] = 2.7182818284590452353602874713527;\r\n  _modelParas[\"pi\"] = 3.14159265358979323846264338327950288419716939937510582097;\r\n  _modelParas[\"avgDocLength\"] = _collectionSize / double(_documentCount);\r\n  _modelParas[\"cTimesAvgDocLen\"] = _modelParas[\"c\"] * _modelParas[\"avgDocLength\"];\r\n  _modelParas[\"lambda\"] = _documentCount * 1.0 / _collectionOccurence;\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n  if (tf - 0.0 < 1e-6) return 0;\r\n  double tfn = tf * log(1+_modelParas[\"cTimesAvgDocLen\"]/dl) / log(2);\r\n  double nominator = tfn * log(tfn * _modelParas[\"lambda\"]) / log(2) + log(_modelParas[\"e\"]) * (1.0/_modelParas[\"lambda\"]-tfn)/log(2) + 0.5*log(2*_modelParas[\"pi\"]*tfn)/log(2);\r\n  double denominator = tfn + 1;\r\n  double score = nominator / denominator;\r\n  return qtf * score;\r\n}','2016-07-26 15:55:13','2016-07-26 16:21:45','2016-07-26 16:22:06',0,''),(24,5,'PL3','mu=2500','B. He and I. Ounis. A study of the dirichlet priors for term frequency normalisation. In Proceedings of the 28th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR ’05, pages 465–471, New York, NY, USA, 2005. ACM.\r\n','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"mu\"] = 2500;\r\n  _modelParas[\"e\"] = 2.7182818284590452353602874713527;\r\n  _modelParas[\"pi\"] = 3.14159265358979323846264338327950288419716939937510582097;\r\n  _modelParas[\"collectionFrequency\"] = _collectionOccurence ? (_collectionOccurence/_collectionSize) : (1.0 / _collectionSize*2.);\r\n  _modelParas[\"muTimesCollectionFrequency\"] = _modelParas[\"mu\"] * _modelParas[\"collectionFrequency\"];\r\n  _modelParas[\"lambda\"] = _documentCount * 1.0 / _collectionOccurence;\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n  if (tf - 0.0 < 1e-6) return 0;\r\n  double tfn = (tf + _modelParas[\"muTimesCollectionFrequency\"]) * _modelParas[\"mu\"] / (dl + _modelParas[\"mu\"]);\r\n  double nominator = tfn * log(tfn * _modelParas[\"lambda\"]) / log(2) + log(_modelParas[\"e\"]) * (1.0/_modelParas[\"lambda\"]-tfn)/log(2) + 0.5*log(2*_modelParas[\"pi\"]*tfn)/log(2);\r\n  double denominator = tfn + 1;\r\n  double score = nominator / denominator;\r\n  return qtf * score;\r\n}','2016-07-26 16:05:51','2016-07-26 16:25:46','2016-07-26 16:26:07',0,''),(25,5,'PL2+','c=10.0','Y. Lv and C. Zhai. Lower-bounding term frequency normalization. In Proceedings of the 20th ACM International Conference on Information and Knowledge Management, CIKM ’11, pages 7–16, NewYork, NY, USA, 2011. ACM\r\n','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"c\"] = 10.0;\r\n  _modelParas[\"delta\"] = 0.8;\r\n  _modelParas[\"e\"] = 2.7182818284590452353602874713527;\r\n  _modelParas[\"pi\"] = 3.14159265358979323846264338327950288419716939937510582097;\r\n  _modelParas[\"avgDocLength\"] = _collectionSize / double(_documentCount);\r\n  _modelParas[\"cTimesAvgDocLen\"] = _modelParas[\"c\"] * _modelParas[\"avgDocLength\"];\r\n  _modelParas[\"lambda\"] = _documentCount * 1.0 / _collectionOccurence;\r\n  _modelParas[\"deltaPart\"] = (_modelParas[\"delta\"]*log(_modelParas[\"delta\"]*_modelParas[\"lambda\"])/log(2) + log(_modelParas[\"e\"])/log(2) * (1/_modelParas[\"lambda\"] - _modelParas[\"delta\"]) + 0.5*log(2*_modelParas[\"pi\"]*_modelParas[\"delta\"])/log(2)) / (_modelParas[\"delta\"]+1);\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n  if (tf - 0.0 < 1e-6) return 0;\r\n  double tfn = tf * log(1+_modelParas[\"cTimesAvgDocLen\"]/dl) / log(2);\r\n  double nominator = tfn * log(tfn * _modelParas[\"lambda\"]) / log(2) + log(_modelParas[\"e\"]) * (1.0/_modelParas[\"lambda\"]-tfn)/log(2) + 0.5*log(2*_modelParas[\"pi\"]*tfn)/log(2);\r\n  double denominator = tfn + 1;\r\n  double score = nominator / denominator;\r\n  score += _modelParas[\"deltaPart\"];\r\n  return qtf * score;\r\n}','2016-07-26 16:30:45','2016-07-26 16:32:01','2016-07-26 16:33:07',0,''),(26,5,'SPL','c=1.0','S. Clinchant and E. Gaussier. Information-based models for ad hoc ir. InProceedings of the 33rdInternational ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR ’10,pages 234–241, New York, NY, USA, 2010. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"c\"] = 1.0;\r\n  _modelParas[\"lambda\"] = _documentOccurrences / _documentCount;\r\n  _modelParas[\"avgDocLength\"] = _collectionSize / double(_documentCount);\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n  if (tf - 0.0 < 1e-6) return 0;\r\n  double tdw = tf * log(1 + _modelParas[\"c\"]*_modelParas[\"avgDocLength\"]/dl);\r\n  double score = 0.0;\r\n  if (fabs(_modelParas[\"lambda\"] - 1) > 1e-8) {\r\n    score = log( fabs( (1 - _modelParas[\"lambda\"]) / (pow(_modelParas[\"lambda\"], tdw/(1+tdw)) - _modelParas[\"lambda\"]) ) );\r\n  }\r\n  return qtf * score;\r\n}','2016-07-26 23:29:33','2016-07-26 23:30:15','2016-07-26 23:31:06',0,''),(27,5,'LGD','c=1.0','S. Clinchant and E. Gaussier. Information-based models for ad hoc ir. InProceedings of the 33rdInternational ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR ’10,pages 234–241, New York, NY, USA, 2010. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"c\"] = 1.0;\r\n  _modelParas[\"lambda\"] = _documentOccurrences / _documentCount;\r\n  _modelParas[\"avgDocLength\"] = _collectionSize / double(_documentCount);\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n  if (tf - 0.0 < 1e-6) return 0;\r\n  double tdw = tf * log(1 + _modelParas[\"c\"]*_modelParas[\"avgDocLength\"]/dl);\r\n  double score = log( (tdw + _modelParas[\"lambda\"]) / _modelParas[\"lambda\"] );\r\n  return qtf * score;\r\n}','2016-07-26 23:34:07','2016-07-26 23:34:07','2016-07-26 23:35:06',0,''),(28,7,'SPUD','omega= 0.8','An approximation to \r\nA Pólya Urn Document Language Model for Improved Information Retrieval, Ronan Cummins, Jiaul H. Paik, Yuanhua Lv 	in\r\nACM Transactions on Information Systems (TOIS) Volume 33 Issue 4, May 2015\r\n\r\nmc is estimated as the average document length in the collection. This is usually estimated off-line using a non closed-form method. ','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"omega\"] = 0.8; // omega / (1 - omega)  = 4\r\n  _modelParas[\"backProb\"] = _collectionOccurence ? (_collectionOccurence/_collectionSize) : (1.0 / _collectionSize);\r\n  _modelParas[\"mc\"] = _collectionSize / _documentCount;\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _modelParas[\"qLen\"] = queryLength;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n  double score = ( (docUniqueTerms/(docUniqueTerms+ 2*_modelParas[\"mc\"])) * (double(tf)/double(dl))   +   (2*_modelParas[\"mc\"]/(docUniqueTerms+ 2*_modelParas[\"mc\"]))*_modelParas[\"backProb\"] );\r\n  //double score = ( (docUniqueTerms/(docUniqueTerms+ 500)) * (double(tf)/double(dl))   +   (500/(docUniqueTerms+ 500))*_modelParas[\"backProb\"] );  \r\n  return qtf * log(score);\r\n}\r\n\r\n','2016-09-27 14:02:26','2016-09-27 15:31:39','2016-09-27 15:32:06',0,''),(29,9,'NTFIDF','','J. H. Paik. A novel tf-idf weighting scheme for effective ranking. InProceedings of the 36th International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR ’13,pages 343–352, New York, NY, USA, 2013. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"idf\"] = log( ( _documentCount + 1 ) / ( _documentOccurrences + 0.1 ) );\r\n  _modelParas[\"avgDocLength\"] = _collectionSize / double(_documentCount);\r\n  _modelParas[\"omega\"] = 2.0 / (1 + log(1 + _modelParas[\"qLen\"]) / log(2.0));\r\n  _modelParas[\"cf\"] = _collectionOccurence / _documentOccurrences;\r\n  _modelParas[\"idfAndCf\"] = _modelParas[\"idf\"] * (_modelParas[\"cf\"] / (1 + _modelParas[\"cf\"]));\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _modelParas[\"qLen\"] = queryLength;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n  double tfNorm = log(1+tf) /log(1+dl / docUniqueTerms);\r\n  double tfNormF = _modelParas[\"omega\"] * tfNorm / (1+tfNorm);\r\n  double dlNorm = tf * log(1+_modelParas[\"avgDocLength\"]/dl) / log(2.0);\r\n  double dlNormF = (1 - _modelParas[\"omega\"]) * dlNorm / (1+dlNorm);\r\n  double score = (tfNormF +dlNormF) * _modelParas[\"idfAndCf\"];\r\n  return qtf * score;\r\n}','2016-11-03 16:23:10','2016-11-03 16:23:10','2016-11-03 16:24:17',0,''),(30,9,'NTFIDF','','J. H. Paik. A novel tf-idf weighting scheme for effective ranking. InProceedings of the 36th International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR ’13,pages 343–352, New York, NY, USA, 2013. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"idf\"] = log( ( _documentCount + 1 ) / ( _documentOccurrences + 0.1 ) );\r\n  _modelParas[\"avgDocLength\"] = _collectionSize / double(_documentCount);\r\n  _modelParas[\"omega\"] = 2.0 / (1 + log(1 + _modelParas[\"qLen\"]) / log(2.0));\r\n  _modelParas[\"cf\"] = _collectionOccurence / _documentOccurrences;\r\n  _modelParas[\"idfAndCf\"] = _modelParas[\"idf\"] * (_modelParas[\"cf\"] / (1 + _modelParas[\"cf\"]));\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _modelParas[\"qLen\"] = queryLength;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n  double tfNorm = log(1+tf) /log(1+dl / docUniqueTerms);\r\n  double tfNormF = _modelParas[\"omega\"] * tfNorm / (1+tfNorm);\r\n  double dlNorm = tf * log(1+_modelParas[\"avgDocLength\"]/dl) / log(2.0);\r\n  double dlNormF = (1 - _modelParas[\"omega\"]) * dlNorm / (1+dlNorm);\r\n  double score = (tfNormF +dlNormF) * _modelParas[\"idfAndCf\"];\r\n  return qtf * score;\r\n}','2016-11-04 01:45:42','2016-11-04 01:45:42','2016-11-04 01:46:07',0,''),(31,12,'DIR+','mu=2500,delta=0.05','Y. Lv and C. Zhai. Lower-bounding term frequency normalization. InProceedings of the 20th ACMInternational Conference on Information andKnowledge Management, CIKM ’11, pages 7–16, NewYork, NY, USA, 2011. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"mu\"] = 2500;\r\n  _modelParas[\"delta\"] = 0.05;\r\n  _modelParas[\"collectionFrequency\"] = _collectionOccurence ? (_collectionOccurence/_collectionSize) : (1.0 / _collectionSize*2.);\r\n  _modelParas[\"deltaPart\"] = log( 1 + _modelParas[\"delta\"] / _modelParas[\"collectionFrequency\"] );\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _modelParas[\"qLen\"] = queryLength;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n  double score = log( 1 + double(tf) / _modelParas[\"collectionFrequency\"] ) + _modelParas[\"deltaPart\"] + _modelParas[\"qLen\"] * log(_modelParas[\"mu\"]/(_modelParas[\"mu\"]+dl));\r\n  return qtf * score;\r\n}','2016-12-19 19:32:22','2016-12-19 19:32:22','2016-12-19 19:33:12',0,''),(32,13,'Bernoulli Language Model','mu=2000','D. Metzler, V. Lavrenko, and W. B. Croft. Formalmultiple-bernoulli models for language modeling. InProceedings of the 27th Annual International ACM SIGIR Conference on Research and Development inInformation Retrieval, SIGIR ’04, pages 540–541, NewYork, NY, USA, 2004. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"mu\"] = 2000;\r\n  _modelParas[\"collectionFrequency\"] = _collectionOccurence ? (_collectionOccurence/_collectionSize) : (1.0 / _collectionSize*2.);\r\n  _modelParas[\"reverseCollectionFrequency\"] = 1.0 / _modelParas[\"collectionFrequency\"] + _modelParas[\"mu\"] - 2;\r\n  _modelParas[\"_muTimesCollectionFrequency\"] = _modelParas[\"mu\"] * _modelParas[\"collectionFrequency\"];\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n  double seen = ( double(tf) + _modelParas[\"_muTimesCollectionFrequency\"] ) / ( double(dl) + _modelParas[\"reverseCollectionFrequency\"] );\r\n  return qtf * seen;\r\n}','2016-12-21 16:06:08','2016-12-21 16:06:08','2016-12-21 16:07:09',0,''),(33,13,'DIR+','mu=2500,delta=0.05','Y. Lv and C. Zhai. Lower-bounding term frequency normalization. InProceedings of the 20th ACMInternational Conference on Information andKnowledge Management, CIKM ’11, pages 7–16, NewYork, NY, USA, 2011. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"mu\"] = 2500;\r\n  _modelParas[\"delta\"] = 0.05;\r\n  _modelParas[\"collectionFrequency\"] = _collectionOccurence ? (_collectionOccurence/_collectionSize) : (1.0 / _collectionSize*2.);\r\n  _modelParas[\"deltaPart\"] = log( 1 + _modelParas[\"delta\"] / _modelParas[\"collectionFrequency\"] );\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _modelParas[\"qLen\"] = queryLength;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n  double score = log( 1 + double(tf) / _modelParas[\"collectionFrequency\"] ) + _modelParas[\"deltaPart\"] + _modelParas[\"qLen\"] * log(_modelParas[\"mu\"]/(_modelParas[\"mu\"]+dl));\r\n  return qtf * score;\r\n}','2016-12-21 16:48:41','2016-12-21 16:48:41','2016-12-21 16:49:07',0,''),(34,13,'Bernoulli Language Model','mu=3000','D. Metzler, V. Lavrenko, and W. B. Croft. Formalmultiple-bernoulli models for language modeling. InProceedings of the 27th Annual International ACM SIGIR Conference on Research and Development inInformation Retrieval, SIGIR ’04, pages 540–541, NewYork, NY, USA, 2004. ACM.','#include \"indri/TermScoreFunction.hpp\"\r\n#include <cmath>\r\n\r\nvoid indri::query::TermScoreFunction::_preCompute() {\r\n  _modelParas[\"mu\"] = 2000;\r\n  _modelParas[\"collectionFrequency\"] = _collectionOccurence ? (_collectionOccurence/_collectionSize) : (1.0 / _collectionSize*2.);\r\n  _modelParas[\"reverseCollectionFrequency\"] = 1.0 / _modelParas[\"collectionFrequency\"] + _modelParas[\"mu\"] - 2;\r\n  _modelParas[\"_muTimesCollectionFrequency\"] = _modelParas[\"mu\"] * _modelParas[\"collectionFrequency\"];\r\n}\r\n\r\nindri::query::TermScoreFunction::TermScoreFunction( double collectionOccurence, double collectionSize, double documentOccurrences, double documentCount, double queryLength, std::map<std::string, double>& paras ) {\r\n  _collectionOccurence = collectionOccurence;\r\n  _collectionSize = collectionSize;\r\n  _documentOccurrences = documentOccurrences;\r\n  _documentCount = documentCount;\r\n  _modelParas = paras;\r\n  _preCompute();\r\n}\r\n\r\n\r\ndouble indri::query::TermScoreFunction::scoreOccurrence( double tf, int dl, double qtf, double docUniqueTerms ) {\r\n  double seen = ( double(tf) + _modelParas[\"_muTimesCollectionFrequency\"] ) / ( double(dl) + _modelParas[\"reverseCollectionFrequency\"] );\r\n  return qtf * seen;\r\n}','2017-01-14 07:45:24','2017-01-14 07:45:24','2017-01-14 07:46:16',0,'');
/*!40000 ALTER TABLE `models` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `query_paths`
--

DROP TABLE IF EXISTS `query_paths`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `query_paths` (
  `query_tag` bigint(20) NOT NULL AUTO_INCREMENT,
  `uid` bigint(20) NOT NULL,
  `name` varchar(255) NOT NULL,
  `index_id` bigint(20) NOT NULL COMMENT 'query must be associated with index',
  `query_path` varchar(255) NOT NULL,
  `evaluation_path` varchar(255) NOT NULL,
  `notes` varchar(255) NOT NULL,
  `add_dt` datetime NOT NULL,
  PRIMARY KEY (`query_tag`),
  KEY `uid` (`uid`),
  KEY `index_path` (`index_id`),
  CONSTRAINT `query_paths_ibfk_1` FOREIGN KEY (`uid`) REFERENCES `users` (`uid`),
  CONSTRAINT `query_paths_ibfk_2` FOREIGN KEY (`index_id`) REFERENCES `index_paths` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `query_paths`
--

LOCK TABLES `query_paths` WRITE;
/*!40000 ALTER TABLE `query_paths` DISABLE KEYS */;
INSERT INTO `query_paths` VALUES (1,3,'wt2g',5,'wt2g','wt2g','query topics for WT2G','2016-04-18 21:51:24'),(2,3,'disk12',2,'disk12','disk12','disk12 is for TREC1,2,3 (51-200)','2016-04-19 19:21:15'),(3,3,'disk45',4,'disk45','disk45','disk45 is for TREC6,7,8 (301-450) and ROBUST04 (601-700)','2016-04-19 19:21:02');
/*!40000 ALTER TABLE `query_paths` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `uid` bigint(12) NOT NULL AUTO_INCREMENT,
  `username` varchar(64) CHARACTER SET ascii COLLATE ascii_bin NOT NULL,
  `email` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `active` varchar(255) NOT NULL COMMENT 'md5 in the activation URL',
  `regAt` datetime DEFAULT NULL,
  `activateAt` datetime DEFAULT NULL,
  `apikey` varchar(64) NOT NULL,
  `firstLoginAt` datetime DEFAULT NULL,
  `resetToken` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `resetComplete` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `isAdmin` tinyint(1) NOT NULL DEFAULT '0',
  `isTest` tinyint(1) NOT NULL DEFAULT '0',
  `firstname` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `middlename` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `lastname` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `institute` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  PRIMARY KEY (`uid`),
  UNIQUE KEY `username` (`username`),
  UNIQUE KEY `email` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (3,'franklyn','yangpeilyn@gmail.com','$2y$10$W4ComNNMhJVDyiMWeVn8k.SYi1nGSysZTbaty6sQ3.H3R/n41x28W','Yes','2016-03-02 19:41:51','2016-03-02 19:41:58','bp5yg7xe0muctk42iq9j6wlh1zvsr3ad8fno','2016-03-02 19:42:00',NULL,NULL,1,0,'Peilin','','Yang','University of Delaware'),(5,'admin','franklyn@udel.edu','$2y$10$E610cQOrMym7D1PAVUZ8m.8FxMnci1tteLVxNnTymAb0qwIhzXzuG','Yes','2016-07-18 01:31:50','2016-07-18 01:32:04','sfk1789eo5cnimxt6dzvbjaly2uwph0qrg34','2016-07-18 01:32:20','2a8c43e6ebc509d2fb229c3f71594156','Yes',1,0,'Admin','','Public','None'),(6,'cazz','cazz@di.ku.dk','$2y$10$Ps9x976WRSrkDe/rGTAZW.vPOzZa80se3fCPH0ot6LM2BlUFtxB1e','Yes','2016-09-15 15:28:11','2016-09-16 01:15:58','plg978e3srku2njft5i6dhyqwc1ox4ma0vzb','2016-09-16 01:16:13',NULL,NULL,0,0,'Casper','','Petersen','University of Copenhagen'),(7,'ronan_cummins','ron.cummins@gmail.com','$2y$10$0aqCX4vG9PrklxhW7KORVOTtMCKO55TfXHqKjTzHV0sTwpmz4WPSW','Yes','2016-09-27 13:22:08','2016-09-27 13:22:21','r3vwcg8x74n6uthsmzlodybia9j02fkp5q1e','2016-09-27 13:22:55',NULL,NULL,0,0,'Ronan ','','Cummins','Cambridge'),(8,'tuxinhui','tuxinhui@gmail.com','$2y$10$jEYZMEBLRzZFo73dEc4w2eK4JtFpuMr6MVEGsjw7bm6HOCHUAe7ny','Yes','2016-10-09 10:27:14','2016-10-09 10:28:09','7tjlodqx8rsg3y59muefk4c21wz0aiph6vnb','2016-10-09 11:29:18',NULL,NULL,0,0,'Xinhui','','Tu','CCNU'),(9,'jfhrecoba','jfhrecoba@126.com','$2y$10$EFGE4iLNvHkha132EAu2buTHtXb6tPy32GY6OpMZVPhWLMF7JunEm','Yes','2016-10-22 03:19:32','2016-10-22 03:21:05','xc2b4hvymf80l9unro6zaqw3tkpj1ged75is','2016-10-22 03:21:16',NULL,NULL,0,0,'Fanghong','','Jian','China Central Normal University'),(10,'eclipsehx','1240204622@qq.com','$2y$10$85N/Ga49HUcN67e1z.j.7O/.w6ckYAyrUnMB4lQeURujwatStc0RS','Yes','2016-10-24 11:58:59','2016-10-24 11:59:18','ye4g0596np3oqfcmiwts1hvxu7lz8jad2rbk','2016-10-24 12:01:51','b891df0da48f45f37136dae164dfbdb5','Yes',0,0,'x','z','h','hx'),(11,'aarslan2','aarslan2@anadolu.edu.tr','$2y$10$klf7OZvABgOssmGgwS6SdeXN4VxNoCX2a8m95DSSKpQgIEKa7r6dC','Yes','2016-11-04 20:38:12','2016-11-04 20:38:40','l102frvwyhs9dnxmkgtbapo75ezui648qjc3','2016-11-04 20:38:45',NULL,NULL,0,0,'Ahmet','','Arslan','Anadolu University'),(12,'test','hfang@udel.edu','$2y$10$rchSOuqqL2lbiVgGnZ/MQegxM1EscuRShY9Z.BV3aA1gHVnlrtDZK','Yes','2016-12-19 18:30:48','2016-12-19 18:31:01','pe467zhwdvokcgfqnbra1syx0lt3i8m9u52j','2016-12-19 18:31:05',NULL,NULL,0,0,'Hui','','Fang','UD '),(13,'montazer','a.montazer2@gmail.com','$2y$10$wq8SGWAZ50.mGN4cE82qL.Ucjv1zu.JmLV2iKJvHRwo2WT56R/MNW','Yes','2016-12-20 11:23:58','2016-12-20 11:24:21','745uxwfpetja9mco0dqvyn1ig2b6l3h8skrz','2016-12-20 11:24:36',NULL,NULL,0,0,'ali','','montazeralghaem','university of tehran'),(14,'Arefeh','yavary.rf@gmail.com','$2y$10$oJ4a/us0675LkJbhF/8PueAFj2SNwTuk/Fqs28MvKKBw9G875T8Ia','Yes','2016-12-21 02:38:33','2016-12-21 02:38:52','m8wioztbryah4s06p7v52jden3uklc9qxg1f','2016-12-21 02:39:11',NULL,NULL,0,0,'Arefeh','','Yavari','University of Tehran'),(15,'mzhariann','mzh.ariann@gmail.com','$2y$10$fJz1U/gfKstPPo7fm4z0DuLaw6wbIe/L/mnv8x3aWWQqggOjadva.','Yes','2017-01-14 09:35:48','2017-01-14 09:36:01','vg0ypnh816doakcm4i7ul3wer5sxqbtfj92z','2017-01-14 09:36:17',NULL,NULL,0,0,'Mozhdeh','','Ariannezhad','University of Tehran'),(16,'wei','aiwei@umich.edu','$2y$10$w/SW4/XuFDCBxGUJrg6X5uzT1Xwco0wZaYwH1ocxlO68U8EUBFItS','Yes','2017-01-25 20:09:54','2017-01-25 20:10:15','x4a17sh95qcduvw6l3m0rjokgnti82efypzb','2017-01-25 20:10:22',NULL,NULL,0,0,'Wei','','Ai','UMich');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-03-04 13:57:08
